OMP_NUM_THREADS = 64
MKL_NUM_THREADS = 1
PYSCF_MAX_MEMORY = 491520
TMPDIR = /central/scratch/yangjunjie//nio-dzvp-444/47156362/
PYSCF_TMPDIR = /central/scratch/yangjunjie//nio-dzvp-444/47156362/

/home/junjiey/anaconda3/envs/fftisdf/bin/python
2.8.0
1.13.1
1.26.4


******** <class 'pyscf.pbc.df.fft.FFTDF'> ********
mesh = [15 15 15] (3375 PWs)
len(kpts) = 64

WARN: ke_cutoff/mesh (40 / [15 15 15]) is not enough for FFTDF to get integral accuracy 1e-10.
Coulomb integral error is ~ 8.8 Eh.
Recommended ke_cutoff/mesh are 679.828 / [57 57 57].

    CPU time for -> FFTDF JK  28129.47 sec, wall time    448.21 sec


******** <class '__main__.InterpolativeSeparableDensityFitting'> ********
mesh = [15 15 15] (3375 PWs)
len(kpts) = 64
Overwritten attributes  kmesh tol c0  of <class '__main__.InterpolativeSeparableDensityFitting'>

WARN: ke_cutoff/mesh (40 / [15 15 15]) is not enough for FFTDF to get integral accuracy 1e-10.
Coulomb integral error is ~ 8.8 Eh.
Recommended ke_cutoff/mesh are 679.828 / [57 57 57].

kmesh = [4 4 4]
Input parent grid mesh = [6, 6, 6], ke_cutoff =  12.45
Final parent grid size = [7 5 7]

Selecting interpolation points
nkpts = 64, nao = 26, c0 =   5.00
Parent grid mesh = [7 5 7], grid size = 245

WARN: The parent grid might be too coarse.

    CPU time for select interpolation points    101.08 sec, wall time      1.60 sec
Pivoted Cholesky rank = 245, nip = 130, estimated error = 3.35e-01
Number of interpolation points = 130, effective CISDF =   5.00
    CPU time for building left-hand side      2.35 sec, wall time      0.04 sec

kpt = 64, ngrid = 3375, nao = 26
ngrid = 3375, blksize = 368936, nip = 130
required disk space = 0 GB
finished creating fswp: /central/scratch/yangjunjie/nio-dzvp-444/47156362/37jl5jmy
blksize = 368936, memory for aoR_loop = 49112 MB
finished aoR_loop[       0:    3375]
    CPU time for building right-hand side    108.42 sec, wall time      1.87 sec
w[  0], rank =  130 /  130
    CPU time for w[  0]      3.62 sec, wall time      0.06 sec
w[  1], rank =  130 /  130
    CPU time for w[  1]      1.70 sec, wall time      0.03 sec
w[  2], rank =  130 /  130
    CPU time for w[  2]      1.58 sec, wall time      0.03 sec
w[  3], rank =  130 /  130
    CPU time for w[  3]      1.87 sec, wall time      0.03 sec
w[  4], rank =  130 /  130
    CPU time for w[  4]      2.05 sec, wall time      0.03 sec
w[  5], rank =  130 /  130
    CPU time for w[  5]      2.10 sec, wall time      0.03 sec
w[  6], rank =  130 /  130
    CPU time for w[  6]      2.05 sec, wall time      0.03 sec
w[  7], rank =  130 /  130
    CPU time for w[  7]      2.09 sec, wall time      0.03 sec
w[  8], rank =  130 /  130
    CPU time for w[  8]      2.06 sec, wall time      0.03 sec
w[  9], rank =  130 /  130
    CPU time for w[  9]      2.07 sec, wall time      0.03 sec
w[ 10], rank =  130 /  130
    CPU time for w[ 10]      2.03 sec, wall time      0.03 sec
w[ 11], rank =  130 /  130
    CPU time for w[ 11]      2.10 sec, wall time      0.03 sec
w[ 12], rank =  130 /  130
    CPU time for w[ 12]      2.09 sec, wall time      0.03 sec
w[ 13], rank =  130 /  130
    CPU time for w[ 13]      2.13 sec, wall time      0.03 sec
w[ 14], rank =  130 /  130
    CPU time for w[ 14]      2.09 sec, wall time      0.03 sec
w[ 15], rank =  130 /  130
    CPU time for w[ 15]      2.14 sec, wall time      0.03 sec
w[ 16], rank =  130 /  130
    CPU time for w[ 16]      2.13 sec, wall time      0.03 sec
w[ 17], rank =  130 /  130
    CPU time for w[ 17]      2.18 sec, wall time      0.03 sec
w[ 18], rank =  130 /  130
    CPU time for w[ 18]      2.07 sec, wall time      0.03 sec
w[ 19], rank =  130 /  130
    CPU time for w[ 19]      2.09 sec, wall time      0.03 sec
w[ 20], rank =  130 /  130
    CPU time for w[ 20]      2.07 sec, wall time      0.03 sec
w[ 21], rank =  130 /  130
    CPU time for w[ 21]      2.09 sec, wall time      0.03 sec
w[ 22], rank =  130 /  130
    CPU time for w[ 22]      2.38 sec, wall time      0.04 sec
w[ 23], rank =  130 /  130
    CPU time for w[ 23]      2.28 sec, wall time      0.04 sec
w[ 24], rank =  130 /  130
    CPU time for w[ 24]      2.20 sec, wall time      0.04 sec
w[ 25], rank =  130 /  130
    CPU time for w[ 25]      2.25 sec, wall time      0.04 sec
w[ 26], rank =  130 /  130
    CPU time for w[ 26]      2.23 sec, wall time      0.04 sec
w[ 27], rank =  130 /  130
    CPU time for w[ 27]      2.24 sec, wall time      0.04 sec
w[ 28], rank =  130 /  130
    CPU time for w[ 28]      2.21 sec, wall time      0.04 sec
w[ 29], rank =  130 /  130
    CPU time for w[ 29]      2.27 sec, wall time      0.04 sec
w[ 30], rank =  130 /  130
    CPU time for w[ 30]      2.20 sec, wall time      0.04 sec
w[ 31], rank =  130 /  130
    CPU time for w[ 31]      2.24 sec, wall time      0.04 sec
w[ 32], rank =  130 /  130
    CPU time for w[ 32]      2.22 sec, wall time      0.04 sec
w[ 33], rank =  130 /  130
    CPU time for w[ 33]      2.27 sec, wall time      0.04 sec
w[ 34], rank =  130 /  130
    CPU time for w[ 34]      2.21 sec, wall time      0.04 sec
w[ 35], rank =  130 /  130
    CPU time for w[ 35]      2.26 sec, wall time      0.04 sec
w[ 36], rank =  130 /  130
    CPU time for w[ 36]      2.25 sec, wall time      0.04 sec
w[ 37], rank =  130 /  130
    CPU time for w[ 37]      2.27 sec, wall time      0.04 sec
w[ 38], rank =  130 /  130
    CPU time for w[ 38]      2.22 sec, wall time      0.04 sec
w[ 39], rank =  130 /  130
    CPU time for w[ 39]      2.26 sec, wall time      0.04 sec
w[ 40], rank =  130 /  130
    CPU time for w[ 40]      2.26 sec, wall time      0.04 sec
w[ 41], rank =  130 /  130
    CPU time for w[ 41]      2.25 sec, wall time      0.04 sec
w[ 42], rank =  130 /  130
    CPU time for w[ 42]      2.26 sec, wall time      0.04 sec
w[ 43], rank =  130 /  130
    CPU time for w[ 43]      2.30 sec, wall time      0.04 sec
w[ 44], rank =  130 /  130
    CPU time for w[ 44]      2.18 sec, wall time      0.03 sec
w[ 45], rank =  130 /  130
    CPU time for w[ 45]      2.42 sec, wall time      0.04 sec
w[ 46], rank =  130 /  130
    CPU time for w[ 46]      2.23 sec, wall time      0.04 sec
w[ 47], rank =  130 /  130
    CPU time for w[ 47]      2.25 sec, wall time      0.04 sec
w[ 48], rank =  130 /  130
    CPU time for w[ 48]      2.29 sec, wall time      0.04 sec
w[ 49], rank =  130 /  130
    CPU time for w[ 49]      2.74 sec, wall time      0.04 sec
w[ 50], rank =  130 /  130
    CPU time for w[ 50]      2.00 sec, wall time      0.03 sec
w[ 51], rank =  130 /  130
    CPU time for w[ 51]      2.09 sec, wall time      0.03 sec
w[ 52], rank =  130 /  130
    CPU time for w[ 52]      2.11 sec, wall time      0.03 sec
w[ 53], rank =  130 /  130
    CPU time for w[ 53]      2.13 sec, wall time      0.03 sec
w[ 54], rank =  130 /  130
    CPU time for w[ 54]      2.07 sec, wall time      0.03 sec
w[ 55], rank =  130 /  130
    CPU time for w[ 55]      2.09 sec, wall time      0.03 sec
w[ 56], rank =  130 /  130
    CPU time for w[ 56]      2.14 sec, wall time      0.03 sec
w[ 57], rank =  130 /  130
    CPU time for w[ 57]      2.13 sec, wall time      0.03 sec
w[ 58], rank =  130 /  130
    CPU time for w[ 58]      2.06 sec, wall time      0.03 sec
w[ 59], rank =  130 /  130
    CPU time for w[ 59]      2.10 sec, wall time      0.03 sec
w[ 60], rank =  130 /  130
    CPU time for w[ 60]      2.12 sec, wall time      0.03 sec
w[ 61], rank =  130 /  130
    CPU time for w[ 61]      2.12 sec, wall time      0.03 sec
w[ 62], rank =  130 /  130
    CPU time for w[ 62]      2.07 sec, wall time      0.03 sec
w[ 63], rank =  130 /  130
    CPU time for w[ 63]      2.11 sec, wall time      0.03 sec
Saving FFTISDF results to /central/scratch/yangjunjie/nio-dzvp-444/47156362/tmpufn3dhno
    CPU time for building ISDF    355.26 sec, wall time      5.80 sec
    CPU time for -> ISDF build    355.53 sec, wall time      5.80 sec
    CPU time for -> ISDF JK      7.94 sec, wall time      0.13 sec
-> ISDF c0 =   5.00, vj err =  3.0706e-02
-> ISDF c0 =   5.00, vk err =  4.4920e-02


******** <class '__main__.InterpolativeSeparableDensityFitting'> ********
mesh = [15 15 15] (3375 PWs)
len(kpts) = 64

WARN: ke_cutoff/mesh (40 / [15 15 15]) is not enough for FFTDF to get integral accuracy 1e-10.
Coulomb integral error is ~ 8.8 Eh.
Recommended ke_cutoff/mesh are 679.828 / [57 57 57].

kmesh = [4 4 4]
Input parent grid mesh = [7, 7, 7], ke_cutoff =  28.02
Final parent grid size = [9 7 9]

Selecting interpolation points
nkpts = 64, nao = 26, c0 =  10.00
Parent grid mesh = [9 7 9], grid size = 567

WARN: The parent grid might be too coarse.

    CPU time for select interpolation points    142.70 sec, wall time      2.26 sec
Pivoted Cholesky rank = 567, nip = 260, estimated error = 7.49e-02
Number of interpolation points = 260, effective CISDF =  10.00
    CPU time for building left-hand side     20.19 sec, wall time      0.32 sec

kpt = 64, ngrid = 3375, nao = 26
ngrid = 3375, blksize = 184438, nip = 260
required disk space = 0 GB
finished creating fswp: /central/scratch/yangjunjie/nio-dzvp-444/47156362/vcr19gsf
blksize = 184438, memory for aoR_loop = 49104 MB
finished aoR_loop[       0:    3375]
    CPU time for building right-hand side    128.23 sec, wall time      2.56 sec
w[  0], rank =  252 /  260
    CPU time for w[  0]      5.92 sec, wall time      0.10 sec
w[  1], rank =  252 /  260
    CPU time for w[  1]      4.73 sec, wall time      0.07 sec
w[  2], rank =  252 /  260
    CPU time for w[  2]      5.20 sec, wall time      0.08 sec
w[  3], rank =  252 /  260
    CPU time for w[  3]      5.18 sec, wall time      0.08 sec
w[  4], rank =  252 /  260
    CPU time for w[  4]      5.19 sec, wall time      0.08 sec
w[  5], rank =  252 /  260
    CPU time for w[  5]      5.15 sec, wall time      0.08 sec
w[  6], rank =  252 /  260
    CPU time for w[  6]      5.10 sec, wall time      0.08 sec
w[  7], rank =  252 /  260
    CPU time for w[  7]      5.13 sec, wall time      0.08 sec
w[  8], rank =  252 /  260
    CPU time for w[  8]      5.12 sec, wall time      0.08 sec
w[  9], rank =  252 /  260
    CPU time for w[  9]      5.06 sec, wall time      0.08 sec
w[ 10], rank =  252 /  260
    CPU time for w[ 10]      5.07 sec, wall time      0.08 sec
w[ 11], rank =  252 /  260
    CPU time for w[ 11]      5.11 sec, wall time      0.08 sec
w[ 12], rank =  252 /  260
    CPU time for w[ 12]      5.00 sec, wall time      0.08 sec
w[ 13], rank =  252 /  260
    CPU time for w[ 13]      5.12 sec, wall time      0.08 sec
w[ 14], rank =  252 /  260
    CPU time for w[ 14]      5.06 sec, wall time      0.08 sec
w[ 15], rank =  252 /  260
    CPU time for w[ 15]      5.09 sec, wall time      0.08 sec
w[ 16], rank =  252 /  260
    CPU time for w[ 16]      5.08 sec, wall time      0.08 sec
w[ 17], rank =  252 /  260
    CPU time for w[ 17]      5.06 sec, wall time      0.08 sec
w[ 18], rank =  252 /  260
    CPU time for w[ 18]      5.01 sec, wall time      0.08 sec
w[ 19], rank =  252 /  260
    CPU time for w[ 19]      5.12 sec, wall time      0.08 sec
w[ 20], rank =  252 /  260
    CPU time for w[ 20]      4.99 sec, wall time      0.08 sec
w[ 21], rank =  252 /  260
    CPU time for w[ 21]      4.92 sec, wall time      0.08 sec
w[ 22], rank =  252 /  260
    CPU time for w[ 22]      5.28 sec, wall time      0.08 sec
w[ 23], rank =  252 /  260
    CPU time for w[ 23]      5.00 sec, wall time      0.08 sec
w[ 24], rank =  252 /  260
    CPU time for w[ 24]      5.03 sec, wall time      0.08 sec
w[ 25], rank =  252 /  260
    CPU time for w[ 25]      5.09 sec, wall time      0.08 sec
w[ 26], rank =  252 /  260
    CPU time for w[ 26]      5.02 sec, wall time      0.08 sec
w[ 27], rank =  252 /  260
    CPU time for w[ 27]      5.11 sec, wall time      0.08 sec
w[ 28], rank =  252 /  260
    CPU time for w[ 28]      5.08 sec, wall time      0.08 sec
w[ 29], rank =  252 /  260
    CPU time for w[ 29]      5.15 sec, wall time      0.08 sec
w[ 30], rank =  252 /  260
    CPU time for w[ 30]      4.94 sec, wall time      0.08 sec
w[ 31], rank =  252 /  260
    CPU time for w[ 31]      5.17 sec, wall time      0.08 sec
w[ 32], rank =  252 /  260
    CPU time for w[ 32]      5.07 sec, wall time      0.08 sec
w[ 33], rank =  252 /  260
    CPU time for w[ 33]      4.96 sec, wall time      0.08 sec
w[ 34], rank =  252 /  260
    CPU time for w[ 34]      5.06 sec, wall time      0.08 sec
w[ 35], rank =  252 /  260
    CPU time for w[ 35]      5.07 sec, wall time      0.08 sec
w[ 36], rank =  252 /  260
    CPU time for w[ 36]      5.01 sec, wall time      0.08 sec
w[ 37], rank =  252 /  260
    CPU time for w[ 37]      5.03 sec, wall time      0.08 sec
w[ 38], rank =  252 /  260
    CPU time for w[ 38]      5.23 sec, wall time      0.08 sec
w[ 39], rank =  252 /  260
    CPU time for w[ 39]      4.99 sec, wall time      0.08 sec
w[ 40], rank =  252 /  260
    CPU time for w[ 40]      5.18 sec, wall time      0.08 sec
w[ 41], rank =  252 /  260
    CPU time for w[ 41]      4.97 sec, wall time      0.08 sec
w[ 42], rank =  252 /  260
    CPU time for w[ 42]      5.31 sec, wall time      0.08 sec
w[ 43], rank =  252 /  260
    CPU time for w[ 43]      4.98 sec, wall time      0.08 sec
w[ 44], rank =  252 /  260
    CPU time for w[ 44]      5.21 sec, wall time      0.08 sec
w[ 45], rank =  252 /  260
    CPU time for w[ 45]      5.03 sec, wall time      0.08 sec
w[ 46], rank =  252 /  260
    CPU time for w[ 46]      5.08 sec, wall time      0.08 sec
w[ 47], rank =  252 /  260
    CPU time for w[ 47]      4.99 sec, wall time      0.08 sec
w[ 48], rank =  252 /  260
    CPU time for w[ 48]      5.11 sec, wall time      0.08 sec
w[ 49], rank =  252 /  260
    CPU time for w[ 49]      5.04 sec, wall time      0.08 sec
w[ 50], rank =  252 /  260
    CPU time for w[ 50]      4.90 sec, wall time      0.08 sec
w[ 51], rank =  252 /  260
    CPU time for w[ 51]      5.16 sec, wall time      0.08 sec
w[ 52], rank =  252 /  260
    CPU time for w[ 52]      5.11 sec, wall time      0.08 sec
w[ 53], rank =  252 /  260
    CPU time for w[ 53]      5.16 sec, wall time      0.08 sec
w[ 54], rank =  252 /  260
    CPU time for w[ 54]      5.05 sec, wall time      0.08 sec
w[ 55], rank =  252 /  260
    CPU time for w[ 55]      5.10 sec, wall time      0.08 sec
w[ 56], rank =  252 /  260
    CPU time for w[ 56]      5.07 sec, wall time      0.08 sec
w[ 57], rank =  252 /  260
    CPU time for w[ 57]      5.08 sec, wall time      0.08 sec
w[ 58], rank =  252 /  260
    CPU time for w[ 58]      5.03 sec, wall time      0.08 sec
w[ 59], rank =  252 /  260
    CPU time for w[ 59]      5.06 sec, wall time      0.08 sec
w[ 60], rank =  252 /  260
    CPU time for w[ 60]      5.03 sec, wall time      0.08 sec
w[ 61], rank =  252 /  260
    CPU time for w[ 61]      5.09 sec, wall time      0.08 sec
w[ 62], rank =  252 /  260
    CPU time for w[ 62]      5.03 sec, wall time      0.08 sec
w[ 63], rank =  252 /  260
    CPU time for w[ 63]      5.10 sec, wall time      0.08 sec
Saving FFTISDF results to /central/scratch/yangjunjie/nio-dzvp-444/47156362/tmpjhjt1a93
    CPU time for building ISDF    623.85 sec, wall time     10.37 sec
    CPU time for -> ISDF build    624.24 sec, wall time     10.37 sec
    CPU time for -> ISDF JK     26.71 sec, wall time      0.42 sec
-> ISDF c0 =  10.00, vj err =  4.7956e-04
-> ISDF c0 =  10.00, vk err =  8.2939e-04


******** <class '__main__.InterpolativeSeparableDensityFitting'> ********
mesh = [15 15 15] (3375 PWs)
len(kpts) = 64

WARN: ke_cutoff/mesh (40 / [15 15 15]) is not enough for FFTDF to get integral accuracy 1e-10.
Coulomb integral error is ~ 8.8 Eh.
Recommended ke_cutoff/mesh are 679.828 / [57 57 57].

kmesh = [4 4 4]
Input parent grid mesh = [8, 8, 8], ke_cutoff =  28.02
Final parent grid size = [9 7 9]

Selecting interpolation points
nkpts = 64, nao = 26, c0 =  15.00
Parent grid mesh = [9 7 9], grid size = 567

WARN: The parent grid might be too coarse.

    CPU time for select interpolation points    134.29 sec, wall time      2.12 sec
Pivoted Cholesky rank = 567, nip = 390, estimated error = 1.59e-02
Number of interpolation points = 390, effective CISDF =  15.00
    CPU time for building left-hand side     37.09 sec, wall time      0.58 sec

kpt = 64, ngrid = 3375, nao = 26
ngrid = 3375, blksize = 122933, nip = 390
required disk space = 1 GB
finished creating fswp: /central/scratch/yangjunjie/nio-dzvp-444/47156362/4roybplv
blksize = 122933, memory for aoR_loop = 49094 MB
finished aoR_loop[       0:    3375]
    CPU time for building right-hand side     92.86 sec, wall time      2.42 sec
w[  0], rank =  306 /  390
    CPU time for w[  0]      9.27 sec, wall time      0.15 sec
w[  1], rank =  306 /  390
    CPU time for w[  1]      9.03 sec, wall time      0.14 sec
w[  2], rank =  306 /  390
    CPU time for w[  2]      8.73 sec, wall time      0.14 sec
w[  3], rank =  306 /  390
    CPU time for w[  3]      8.58 sec, wall time      0.14 sec
w[  4], rank =  306 /  390
    CPU time for w[  4]      8.97 sec, wall time      0.14 sec
w[  5], rank =  306 /  390
    CPU time for w[  5]      8.99 sec, wall time      0.14 sec
w[  6], rank =  306 /  390
    CPU time for w[  6]      9.11 sec, wall time      0.14 sec
w[  7], rank =  306 /  390
    CPU time for w[  7]      9.06 sec, wall time      0.14 sec
w[  8], rank =  306 /  390
    CPU time for w[  8]      9.26 sec, wall time      0.15 sec
w[  9], rank =  306 /  390
    CPU time for w[  9]      9.08 sec, wall time      0.14 sec
w[ 10], rank =  306 /  390
    CPU time for w[ 10]      9.47 sec, wall time      0.15 sec
w[ 11], rank =  306 /  390
    CPU time for w[ 11]      8.90 sec, wall time      0.14 sec
w[ 12], rank =  306 /  390
    CPU time for w[ 12]      9.22 sec, wall time      0.14 sec
w[ 13], rank =  306 /  390
    CPU time for w[ 13]      9.16 sec, wall time      0.14 sec
w[ 14], rank =  306 /  390
    CPU time for w[ 14]     10.08 sec, wall time      0.16 sec
w[ 15], rank =  306 /  390
    CPU time for w[ 15]      9.99 sec, wall time      0.16 sec
w[ 16], rank =  306 /  390
    CPU time for w[ 16]      9.86 sec, wall time      0.16 sec
w[ 17], rank =  306 /  390
    CPU time for w[ 17]      8.94 sec, wall time      0.14 sec
w[ 18], rank =  306 /  390
    CPU time for w[ 18]      8.54 sec, wall time      0.14 sec
w[ 19], rank =  306 /  390
    CPU time for w[ 19]      8.87 sec, wall time      0.14 sec
w[ 20], rank =  306 /  390
    CPU time for w[ 20]      9.70 sec, wall time      0.15 sec
w[ 21], rank =  306 /  390
    CPU time for w[ 21]      8.91 sec, wall time      0.14 sec
w[ 22], rank =  306 /  390
    CPU time for w[ 22]      8.62 sec, wall time      0.14 sec
w[ 23], rank =  306 /  390
    CPU time for w[ 23]      8.75 sec, wall time      0.14 sec
w[ 24], rank =  306 /  390
    CPU time for w[ 24]      9.06 sec, wall time      0.14 sec
w[ 25], rank =  306 /  390
    CPU time for w[ 25]      8.61 sec, wall time      0.14 sec
w[ 26], rank =  306 /  390
    CPU time for w[ 26]      9.65 sec, wall time      0.15 sec
w[ 27], rank =  306 /  390
    CPU time for w[ 27]      8.96 sec, wall time      0.14 sec
w[ 28], rank =  306 /  390
    CPU time for w[ 28]      9.20 sec, wall time      0.15 sec
w[ 29], rank =  306 /  390
    CPU time for w[ 29]      9.03 sec, wall time      0.14 sec
w[ 30], rank =  306 /  390
    CPU time for w[ 30]      9.47 sec, wall time      0.15 sec
w[ 31], rank =  306 /  390
    CPU time for w[ 31]      9.02 sec, wall time      0.14 sec
w[ 32], rank =  306 /  390
    CPU time for w[ 32]      8.73 sec, wall time      0.14 sec
w[ 33], rank =  306 /  390
    CPU time for w[ 33]      8.72 sec, wall time      0.14 sec
w[ 34], rank =  307 /  390
    CPU time for w[ 34]      8.95 sec, wall time      0.14 sec
w[ 35], rank =  306 /  390
    CPU time for w[ 35]      9.21 sec, wall time      0.14 sec
w[ 36], rank =  306 /  390
    CPU time for w[ 36]      9.11 sec, wall time      0.14 sec
w[ 37], rank =  306 /  390
    CPU time for w[ 37]      8.64 sec, wall time      0.14 sec
w[ 38], rank =  306 /  390
    CPU time for w[ 38]      8.75 sec, wall time      0.14 sec
w[ 39], rank =  306 /  390
    CPU time for w[ 39]      8.62 sec, wall time      0.14 sec
w[ 40], rank =  306 /  390
    CPU time for w[ 40]      9.01 sec, wall time      0.14 sec
w[ 41], rank =  306 /  390
    CPU time for w[ 41]      8.58 sec, wall time      0.13 sec
w[ 42], rank =  306 /  390
    CPU time for w[ 42]      8.68 sec, wall time      0.14 sec
w[ 43], rank =  306 /  390
    CPU time for w[ 43]      9.22 sec, wall time      0.14 sec
w[ 44], rank =  306 /  390
    CPU time for w[ 44]      9.75 sec, wall time      0.15 sec
w[ 45], rank =  306 /  390
    CPU time for w[ 45]      8.69 sec, wall time      0.14 sec
w[ 46], rank =  306 /  390
    CPU time for w[ 46]      9.71 sec, wall time      0.15 sec
w[ 47], rank =  306 /  390
    CPU time for w[ 47]      9.43 sec, wall time      0.15 sec
w[ 48], rank =  306 /  390
    CPU time for w[ 48]      9.07 sec, wall time      0.14 sec
w[ 49], rank =  306 /  390
    CPU time for w[ 49]      9.31 sec, wall time      0.15 sec
w[ 50], rank =  306 /  390
    CPU time for w[ 50]      9.67 sec, wall time      0.15 sec
w[ 51], rank =  306 /  390
    CPU time for w[ 51]      9.16 sec, wall time      0.14 sec
w[ 52], rank =  306 /  390
    CPU time for w[ 52]      9.17 sec, wall time      0.14 sec
w[ 53], rank =  306 /  390
    CPU time for w[ 53]      9.47 sec, wall time      0.15 sec
w[ 54], rank =  306 /  390
    CPU time for w[ 54]      9.68 sec, wall time      0.15 sec
w[ 55], rank =  306 /  390
    CPU time for w[ 55]      8.94 sec, wall time      0.14 sec
w[ 56], rank =  306 /  390
    CPU time for w[ 56]      9.62 sec, wall time      0.15 sec
w[ 57], rank =  306 /  390
    CPU time for w[ 57]      9.05 sec, wall time      0.14 sec
w[ 58], rank =  306 /  390
    CPU time for w[ 58]      9.19 sec, wall time      0.14 sec
w[ 59], rank =  306 /  390
    CPU time for w[ 59]      9.17 sec, wall time      0.14 sec
w[ 60], rank =  306 /  390
    CPU time for w[ 60]      9.66 sec, wall time      0.15 sec
w[ 61], rank =  306 /  390
    CPU time for w[ 61]      9.12 sec, wall time      0.14 sec
w[ 62], rank =  306 /  390
    CPU time for w[ 62]      9.14 sec, wall time      0.14 sec
w[ 63], rank =  306 /  390
    CPU time for w[ 63]      9.27 sec, wall time      0.15 sec
Saving FFTISDF results to /central/scratch/yangjunjie/nio-dzvp-444/47156362/tmphizd699j
    CPU time for building ISDF    858.67 sec, wall time     14.56 sec
    CPU time for -> ISDF build    859.02 sec, wall time     14.57 sec
    CPU time for -> ISDF JK     60.30 sec, wall time      0.95 sec
-> ISDF c0 =  15.00, vj err =  3.8029e-04
-> ISDF c0 =  15.00, vk err =  6.3137e-04


******** <class '__main__.InterpolativeSeparableDensityFitting'> ********
mesh = [15 15 15] (3375 PWs)
len(kpts) = 64

WARN: ke_cutoff/mesh (40 / [15 15 15]) is not enough for FFTDF to get integral accuracy 1e-10.
Coulomb integral error is ~ 8.8 Eh.
Recommended ke_cutoff/mesh are 679.828 / [57 57 57].

kmesh = [4 4 4]
Input parent grid mesh = [9, 9, 9], ke_cutoff =  49.82
Final parent grid size = [11  9 11]

Selecting interpolation points
nkpts = 64, nao = 26, c0 =  20.00
Parent grid mesh = [11  9 11], grid size = 1089

WARN: The parent grid might be too coarse.

    CPU time for select interpolation points    155.56 sec, wall time      2.47 sec
Pivoted Cholesky rank = 1089, nip = 520, estimated error = 7.79e-03
Number of interpolation points = 520, effective CISDF =  20.00
    CPU time for building left-hand side     60.13 sec, wall time      0.96 sec

kpt = 64, ngrid = 3375, nao = 26
ngrid = 3375, blksize = 92173, nip = 520
required disk space = 1 GB
finished creating fswp: /central/scratch/yangjunjie/nio-dzvp-444/47156362/8hsibxuq
blksize = 92173, memory for aoR_loop = 49080 MB
finished aoR_loop[       0:    3375]
    CPU time for building right-hand side    122.81 sec, wall time      3.34 sec
w[  0], rank =  324 /  520
    CPU time for w[  0]     13.22 sec, wall time      0.23 sec
w[  1], rank =  324 /  520
    CPU time for w[  1]     12.84 sec, wall time      0.21 sec
w[  2], rank =  324 /  520
    CPU time for w[  2]     12.80 sec, wall time      0.20 sec
w[  3], rank =  324 /  520
    CPU time for w[  3]     12.87 sec, wall time      0.20 sec
w[  4], rank =  324 /  520
    CPU time for w[  4]     14.92 sec, wall time      0.23 sec
w[  5], rank =  324 /  520
    CPU time for w[  5]     14.06 sec, wall time      0.22 sec
w[  6], rank =  324 /  520
    CPU time for w[  6]     14.52 sec, wall time      0.23 sec
w[  7], rank =  324 /  520
    CPU time for w[  7]     13.92 sec, wall time      0.22 sec
w[  8], rank =  324 /  520
    CPU time for w[  8]     15.19 sec, wall time      0.24 sec
w[  9], rank =  324 /  520
    CPU time for w[  9]     14.08 sec, wall time      0.22 sec
w[ 10], rank =  324 /  520
    CPU time for w[ 10]     14.02 sec, wall time      0.22 sec
w[ 11], rank =  324 /  520
    CPU time for w[ 11]     14.58 sec, wall time      0.23 sec
w[ 12], rank =  324 /  520
    CPU time for w[ 12]     14.29 sec, wall time      0.22 sec
w[ 13], rank =  324 /  520
    CPU time for w[ 13]     14.49 sec, wall time      0.23 sec
w[ 14], rank =  324 /  520
    CPU time for w[ 14]     14.53 sec, wall time      0.23 sec
w[ 15], rank =  324 /  520
    CPU time for w[ 15]     14.15 sec, wall time      0.22 sec
w[ 16], rank =  324 /  520
    CPU time for w[ 16]     14.56 sec, wall time      0.23 sec
w[ 17], rank =  324 /  520
    CPU time for w[ 17]     13.96 sec, wall time      0.22 sec
w[ 18], rank =  324 /  520
    CPU time for w[ 18]     14.36 sec, wall time      0.23 sec
w[ 19], rank =  324 /  520
    CPU time for w[ 19]     13.99 sec, wall time      0.22 sec
w[ 20], rank =  324 /  520
    CPU time for w[ 20]     14.75 sec, wall time      0.23 sec
w[ 21], rank =  324 /  520
    CPU time for w[ 21]     13.86 sec, wall time      0.22 sec
w[ 22], rank =  324 /  520
    CPU time for w[ 22]     14.76 sec, wall time      0.23 sec
w[ 23], rank =  324 /  520
    CPU time for w[ 23]     13.90 sec, wall time      0.22 sec
w[ 24], rank =  324 /  520
    CPU time for w[ 24]     14.92 sec, wall time      0.23 sec
w[ 25], rank =  324 /  520
    CPU time for w[ 25]     14.52 sec, wall time      0.23 sec
w[ 26], rank =  324 /  520
    CPU time for w[ 26]     14.71 sec, wall time      0.23 sec
w[ 27], rank =  324 /  520
    CPU time for w[ 27]     14.48 sec, wall time      0.23 sec
w[ 28], rank =  324 /  520
    CPU time for w[ 28]     14.22 sec, wall time      0.22 sec
w[ 29], rank =  324 /  520
    CPU time for w[ 29]     13.86 sec, wall time      0.22 sec
w[ 30], rank =  324 /  520
    CPU time for w[ 30]     14.41 sec, wall time      0.23 sec
w[ 31], rank =  324 /  520
    CPU time for w[ 31]     14.03 sec, wall time      0.22 sec
w[ 32], rank =  324 /  520
    CPU time for w[ 32]     14.58 sec, wall time      0.23 sec
w[ 33], rank =  324 /  520
    CPU time for w[ 33]     14.94 sec, wall time      0.23 sec
w[ 34], rank =  324 /  520
    CPU time for w[ 34]     15.09 sec, wall time      0.24 sec
w[ 35], rank =  324 /  520
    CPU time for w[ 35]     15.14 sec, wall time      0.24 sec
w[ 36], rank =  324 /  520
    CPU time for w[ 36]     15.32 sec, wall time      0.24 sec
w[ 37], rank =  324 /  520
    CPU time for w[ 37]     14.41 sec, wall time      0.23 sec
w[ 38], rank =  324 /  520
    CPU time for w[ 38]     14.81 sec, wall time      0.23 sec
w[ 39], rank =  324 /  520
    CPU time for w[ 39]     14.94 sec, wall time      0.23 sec
w[ 40], rank =  324 /  520
    CPU time for w[ 40]     14.59 sec, wall time      0.23 sec
w[ 41], rank =  324 /  520
    CPU time for w[ 41]     14.83 sec, wall time      0.23 sec
w[ 42], rank =  324 /  520
    CPU time for w[ 42]     14.64 sec, wall time      0.23 sec
w[ 43], rank =  324 /  520
    CPU time for w[ 43]     14.49 sec, wall time      0.23 sec
w[ 44], rank =  324 /  520
    CPU time for w[ 44]     15.14 sec, wall time      0.24 sec
w[ 45], rank =  324 /  520
    CPU time for w[ 45]     14.71 sec, wall time      0.23 sec
w[ 46], rank =  324 /  520
    CPU time for w[ 46]     15.82 sec, wall time      0.25 sec
w[ 47], rank =  324 /  520
    CPU time for w[ 47]     14.52 sec, wall time      0.23 sec
w[ 48], rank =  324 /  520
    CPU time for w[ 48]     15.09 sec, wall time      0.24 sec
w[ 49], rank =  324 /  520
    CPU time for w[ 49]     14.14 sec, wall time      0.22 sec
w[ 50], rank =  324 /  520
    CPU time for w[ 50]     14.97 sec, wall time      0.23 sec
w[ 51], rank =  324 /  520
    CPU time for w[ 51]     15.10 sec, wall time      0.24 sec
w[ 52], rank =  324 /  520
    CPU time for w[ 52]     15.45 sec, wall time      0.24 sec
w[ 53], rank =  324 /  520
    CPU time for w[ 53]     14.35 sec, wall time      0.23 sec
w[ 54], rank =  324 /  520
    CPU time for w[ 54]     14.98 sec, wall time      0.23 sec
w[ 55], rank =  324 /  520
    CPU time for w[ 55]     14.17 sec, wall time      0.22 sec
w[ 56], rank =  324 /  520
    CPU time for w[ 56]     15.05 sec, wall time      0.24 sec
w[ 57], rank =  324 /  520
    CPU time for w[ 57]     14.53 sec, wall time      0.23 sec
w[ 58], rank =  324 /  520
    CPU time for w[ 58]     15.14 sec, wall time      0.24 sec
w[ 59], rank =  324 /  520
    CPU time for w[ 59]     14.21 sec, wall time      0.22 sec
w[ 60], rank =  324 /  520
    CPU time for w[ 60]     14.20 sec, wall time      0.22 sec
w[ 61], rank =  324 /  520
    CPU time for w[ 61]     14.33 sec, wall time      0.22 sec
w[ 62], rank =  324 /  520
    CPU time for w[ 62]     14.53 sec, wall time      0.23 sec
w[ 63], rank =  324 /  520
    CPU time for w[ 63]     14.11 sec, wall time      0.22 sec
Saving FFTISDF results to /central/scratch/yangjunjie/nio-dzvp-444/47156362/tmphlb9a4jx
    CPU time for building ISDF   1276.48 sec, wall time     21.66 sec
    CPU time for -> ISDF build   1276.69 sec, wall time     21.67 sec
    CPU time for -> ISDF JK     74.46 sec, wall time      1.21 sec
-> ISDF c0 =  20.00, vj err =  2.4025e-05
-> ISDF c0 =  20.00, vk err =  3.2692e-05
Wrote profile results to fft_isdf.py.lprof
Inspect results with:
python -m line_profiler -rmt "fft_isdf.py.lprof"
