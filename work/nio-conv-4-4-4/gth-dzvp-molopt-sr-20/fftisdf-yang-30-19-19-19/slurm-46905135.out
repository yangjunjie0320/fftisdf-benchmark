OMP_NUM_THREADS = 32
MKL_NUM_THREADS = 1
PYSCF_MAX_MEMORY = 245760
TMPDIR = /central/scratch/yangjunjie//fftisdf-yang-30-19-19-19/46905135/
PYSCF_TMPDIR = /central/scratch/yangjunjie//fftisdf-yang-30-19-19-19/46905135/

/home/junjiey/anaconda3/envs/fftisdf/bin/python
2.7.0
1.14.1
1.26.4
WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.



******** <class 'fft_isdf.InterpolativeSeparableDensityFitting'> ********
mesh = [17 17 17] (4913 PWs)
len(kpts) = 64
    kpts = [[ 0.00000000e+00  0.00000000e+00  0.00000000e+00]
 [-1.42289801e-17 -1.42289801e-17  1.98557713e-01]
 [-2.84579601e-17 -2.84579601e-17  3.97115427e-01]
 [-4.26869402e-17 -4.26869402e-17  5.95673140e-01]
 [ 0.00000000e+00  1.98557713e-01  0.00000000e+00]
 [-1.42289801e-17  1.98557713e-01  1.98557713e-01]
 [-2.84579601e-17  1.98557713e-01  3.97115427e-01]
 [-4.26869402e-17  1.98557713e-01  5.95673140e-01]
 [ 0.00000000e+00  3.97115427e-01  0.00000000e+00]
 [-1.42289801e-17  3.97115427e-01  1.98557713e-01]
 [-2.84579601e-17  3.97115427e-01  3.97115427e-01]
 [-4.26869402e-17  3.97115427e-01  5.95673140e-01]
 [ 0.00000000e+00  5.95673140e-01  0.00000000e+00]
 [-1.42289801e-17  5.95673140e-01  1.98557713e-01]
 [-2.84579601e-17  5.95673140e-01  3.97115427e-01]
 [-4.26869402e-17  5.95673140e-01  5.95673140e-01]
 [ 1.98557713e-01  1.42289801e-17  0.00000000e+00]
 [ 1.98557713e-01  0.00000000e+00  1.98557713e-01]
 [ 1.98557713e-01 -1.42289801e-17  3.97115427e-01]
 [ 1.98557713e-01 -2.84579601e-17  5.95673140e-01]
 [ 1.98557713e-01  1.98557713e-01  0.00000000e+00]
 [ 1.98557713e-01  1.98557713e-01  1.98557713e-01]
 [ 1.98557713e-01  1.98557713e-01  3.97115427e-01]
 [ 1.98557713e-01  1.98557713e-01  5.95673140e-01]
 [ 1.98557713e-01  3.97115427e-01  0.00000000e+00]
 [ 1.98557713e-01  3.97115427e-01  1.98557713e-01]
 [ 1.98557713e-01  3.97115427e-01  3.97115427e-01]
 [ 1.98557713e-01  3.97115427e-01  5.95673140e-01]
 [ 1.98557713e-01  5.95673140e-01  0.00000000e+00]
 [ 1.98557713e-01  5.95673140e-01  1.98557713e-01]
 [ 1.98557713e-01  5.95673140e-01  3.97115427e-01]
 [ 1.98557713e-01  5.95673140e-01  5.95673140e-01]
 [ 3.97115427e-01  2.84579601e-17  0.00000000e+00]
 [ 3.97115427e-01  1.42289801e-17  1.98557713e-01]
 [ 3.97115427e-01  0.00000000e+00  3.97115427e-01]
 [ 3.97115427e-01 -1.42289801e-17  5.95673140e-01]
 [ 3.97115427e-01  1.98557713e-01  0.00000000e+00]
 [ 3.97115427e-01  1.98557713e-01  1.98557713e-01]
 [ 3.97115427e-01  1.98557713e-01  3.97115427e-01]
 [ 3.97115427e-01  1.98557713e-01  5.95673140e-01]
 [ 3.97115427e-01  3.97115427e-01  0.00000000e+00]
 [ 3.97115427e-01  3.97115427e-01  1.98557713e-01]
 [ 3.97115427e-01  3.97115427e-01  3.97115427e-01]
 [ 3.97115427e-01  3.97115427e-01  5.95673140e-01]
 [ 3.97115427e-01  5.95673140e-01  0.00000000e+00]
 [ 3.97115427e-01  5.95673140e-01  1.98557713e-01]
 [ 3.97115427e-01  5.95673140e-01  3.97115427e-01]
 [ 3.97115427e-01  5.95673140e-01  5.95673140e-01]
 [ 5.95673140e-01  4.26869402e-17  0.00000000e+00]
 [ 5.95673140e-01  2.84579601e-17  1.98557713e-01]
 [ 5.95673140e-01  1.42289801e-17  3.97115427e-01]
 [ 5.95673140e-01  0.00000000e+00  5.95673140e-01]
 [ 5.95673140e-01  1.98557713e-01  0.00000000e+00]
 [ 5.95673140e-01  1.98557713e-01  1.98557713e-01]
 [ 5.95673140e-01  1.98557713e-01  3.97115427e-01]
 [ 5.95673140e-01  1.98557713e-01  5.95673140e-01]
 [ 5.95673140e-01  3.97115427e-01  0.00000000e+00]
 [ 5.95673140e-01  3.97115427e-01  1.98557713e-01]
 [ 5.95673140e-01  3.97115427e-01  3.97115427e-01]
 [ 5.95673140e-01  3.97115427e-01  5.95673140e-01]
 [ 5.95673140e-01  5.95673140e-01  0.00000000e+00]
 [ 5.95673140e-01  5.95673140e-01  1.98557713e-01]
 [ 5.95673140e-01  5.95673140e-01  3.97115427e-01]
 [ 5.95673140e-01  5.95673140e-01  5.95673140e-01]]
Overwritten attributes  tol m0 c0 kmesh  of <class 'fft_isdf.InterpolativeSeparableDensityFitting'>

WARN: ke_cutoff/mesh (20 / [17 17 17]) is not enough for FFTDF to get integral accuracy 1e-08.
Coulomb integral error is ~ 1e+02 Eh.
Recommended ke_cutoff/mesh are 1166.24 / [123 123 123].

kmesh = [4 4 4]
Input parent grid mesh = [19, 19, 19], ke_cutoff =  91.23
Final parent grid size = [19 19 19]

Selecting interpolation points
nkpts = 64, nao = 156, c0 =  30.00
Parent grid mesh = [19 19 19], grid size = 6859
    CPU time for select interpolation points    562.59 sec, wall time     19.56 sec
Pivoted Cholesky rank = 5121, nip = 4680, estimated error = 2.27e-04
Number of interpolation points = 4680, effective CISDF =  30.00
    CPU time for building left-hand side    170.56 sec, wall time     15.08 sec

kpt = 64, ngrid = 4913, nao = 156
ngrid = 4913, blksize = 4637, nip = 4680
required disk space = 23 GB
finished creating fswp: /central/scratch/yangjunjie/fftisdf-yang-30-19-19-19/46905135/wyt33kjv
blksize = 4637, memory for aoR_loop = 22221 MB
finished aoR_loop[       0:    4637]
finished aoR_loop[    4637:    4913]
    CPU time for building right-hand side    299.42 sec, wall time     31.95 sec
w[  0], rank = 4680 / 4680
    CPU time for w[  0]    865.17 sec, wall time     27.91 sec
w[  1], rank = 4680 / 4680
    CPU time for w[  1]    908.57 sec, wall time     29.64 sec
w[  2], rank = 4680 / 4680
    CPU time for w[  2]    861.73 sec, wall time     27.87 sec
w[  3], rank = 4680 / 4680
    CPU time for w[  3]    897.16 sec, wall time     29.28 sec
w[  4], rank = 4680 / 4680
    CPU time for w[  4]    863.73 sec, wall time     28.29 sec
w[  5], rank = 4680 / 4680
    CPU time for w[  5]    755.09 sec, wall time     24.86 sec
w[  6], rank = 4680 / 4680
    CPU time for w[  6]    856.86 sec, wall time     27.98 sec
w[  7], rank = 4680 / 4680
    CPU time for w[  7]    887.81 sec, wall time     29.18 sec
w[  8], rank = 4680 / 4680
    CPU time for w[  8]    821.48 sec, wall time     26.74 sec
w[  9], rank = 4680 / 4680
    CPU time for w[  9]   1011.36 sec, wall time     33.04 sec
w[ 10], rank = 4680 / 4680
    CPU time for w[ 10]    902.70 sec, wall time     29.19 sec
w[ 11], rank = 4680 / 4680
    CPU time for w[ 11]    896.32 sec, wall time     29.26 sec
w[ 12], rank = 4680 / 4680
    CPU time for w[ 12]    905.47 sec, wall time     29.51 sec
w[ 13], rank = 4680 / 4680
    CPU time for w[ 13]    924.56 sec, wall time     30.37 sec
w[ 14], rank = 4680 / 4680
    CPU time for w[ 14]    861.53 sec, wall time     28.17 sec
w[ 15], rank = 4680 / 4680
    CPU time for w[ 15]    893.41 sec, wall time     29.46 sec
w[ 16], rank = 4680 / 4680
    CPU time for w[ 16]    885.12 sec, wall time     28.92 sec
w[ 17], rank = 4680 / 4680
    CPU time for w[ 17]    907.47 sec, wall time     29.86 sec
w[ 18], rank = 4680 / 4680
    CPU time for w[ 18]    875.28 sec, wall time     29.09 sec
w[ 19], rank = 4680 / 4680
    CPU time for w[ 19]    952.92 sec, wall time     31.49 sec
w[ 20], rank = 4680 / 4680
    CPU time for w[ 20]    787.65 sec, wall time     25.93 sec
w[ 21], rank = 4680 / 4680
    CPU time for w[ 21]    843.46 sec, wall time     27.64 sec
w[ 22], rank = 4680 / 4680
    CPU time for w[ 22]    889.04 sec, wall time     29.01 sec
w[ 23], rank = 4680 / 4680
    CPU time for w[ 23]    888.89 sec, wall time     29.04 sec
w[ 24], rank = 4680 / 4680
    CPU time for w[ 24]    883.81 sec, wall time     28.86 sec
w[ 25], rank = 4680 / 4680
    CPU time for w[ 25]    843.94 sec, wall time     27.67 sec
w[ 26], rank = 4680 / 4680
    CPU time for w[ 26]    800.06 sec, wall time     26.17 sec
w[ 27], rank = 4680 / 4680
    CPU time for w[ 27]    863.61 sec, wall time     28.24 sec
w[ 28], rank = 4680 / 4680
    CPU time for w[ 28]    856.48 sec, wall time     28.04 sec
w[ 29], rank = 4680 / 4680
    CPU time for w[ 29]    855.60 sec, wall time     27.98 sec
w[ 30], rank = 4680 / 4680
    CPU time for w[ 30]    845.16 sec, wall time     27.76 sec
w[ 31], rank = 4680 / 4680
    CPU time for w[ 31]    872.34 sec, wall time     28.56 sec
w[ 32], rank = 4680 / 4680
    CPU time for w[ 32]    853.37 sec, wall time     27.66 sec
w[ 33], rank = 4680 / 4680
    CPU time for w[ 33]    907.51 sec, wall time     29.77 sec
w[ 34], rank = 4680 / 4680
    CPU time for w[ 34]    814.44 sec, wall time     26.39 sec
w[ 35], rank = 4680 / 4680
    CPU time for w[ 35]    895.24 sec, wall time     29.27 sec
w[ 36], rank = 4680 / 4680
    CPU time for w[ 36]    742.98 sec, wall time     24.47 sec
w[ 37], rank = 4680 / 4680
    CPU time for w[ 37]    894.58 sec, wall time     29.28 sec
w[ 38], rank = 4680 / 4680
    CPU time for w[ 38]    876.92 sec, wall time     28.62 sec
w[ 39], rank = 4680 / 4680
    CPU time for w[ 39]   1809.19 sec, wall time     58.97 sec
w[ 40], rank = 4680 / 4680
    CPU time for w[ 40]    950.52 sec, wall time     30.81 sec
w[ 41], rank = 4680 / 4680
    CPU time for w[ 41]    851.08 sec, wall time     27.79 sec
w[ 42], rank = 4680 / 4680
    CPU time for w[ 42]    750.53 sec, wall time     24.37 sec
w[ 43], rank = 4680 / 4680
    CPU time for w[ 43]    804.31 sec, wall time     26.40 sec
w[ 44], rank = 4680 / 4680
    CPU time for w[ 44]    965.70 sec, wall time     31.70 sec
