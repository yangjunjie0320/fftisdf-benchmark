OMP_NUM_THREADS = 64
MKL_NUM_THREADS = 1
PYSCF_MAX_MEMORY = 491520
TMPDIR = /central/scratch/yangjunjie//work/diamond-conv/gth-szv-molopt-sr/fftisdf-yang-20-120/4-4-4//47012910/
PYSCF_TMPDIR = /central/scratch/yangjunjie//work/diamond-conv/gth-szv-molopt-sr/fftisdf-yang-20-120/4-4-4//47012910/

/home/junjiey/anaconda3/envs/fftisdf/bin/python
2.7.0
1.14.1
1.26.4


******** <class 'fft_isdf.InterpolativeSeparableDensityFitting'> ********
mesh = [35 35 35] (42875 PWs)
len(kpts) = 64
    kpts = [[ 0.00000000e+00  0.00000000e+00  0.00000000e+00]
 [-1.31120088e-17 -1.31120088e-17  2.33442606e-01]
 [-2.62240176e-17 -2.62240176e-17  4.66885213e-01]
 [-3.93360265e-17 -3.93360265e-17  7.00327819e-01]
 [ 0.00000000e+00  2.33442606e-01  0.00000000e+00]
 [-1.31120088e-17  2.33442606e-01  2.33442606e-01]
 [-2.62240176e-17  2.33442606e-01  4.66885213e-01]
 [-3.93360265e-17  2.33442606e-01  7.00327819e-01]
 [ 0.00000000e+00  4.66885213e-01  0.00000000e+00]
 [-1.31120088e-17  4.66885213e-01  2.33442606e-01]
 [-2.62240176e-17  4.66885213e-01  4.66885213e-01]
 [-3.93360265e-17  4.66885213e-01  7.00327819e-01]
 [ 0.00000000e+00  7.00327819e-01  0.00000000e+00]
 [-1.31120088e-17  7.00327819e-01  2.33442606e-01]
 [-2.62240176e-17  7.00327819e-01  4.66885213e-01]
 [-3.93360265e-17  7.00327819e-01  7.00327819e-01]
 [ 2.33442606e-01  1.31120088e-17  0.00000000e+00]
 [ 2.33442606e-01  0.00000000e+00  2.33442606e-01]
 [ 2.33442606e-01 -1.31120088e-17  4.66885213e-01]
 [ 2.33442606e-01 -2.62240176e-17  7.00327819e-01]
 [ 2.33442606e-01  2.33442606e-01  0.00000000e+00]
 [ 2.33442606e-01  2.33442606e-01  2.33442606e-01]
 [ 2.33442606e-01  2.33442606e-01  4.66885213e-01]
 [ 2.33442606e-01  2.33442606e-01  7.00327819e-01]
 [ 2.33442606e-01  4.66885213e-01  0.00000000e+00]
 [ 2.33442606e-01  4.66885213e-01  2.33442606e-01]
 [ 2.33442606e-01  4.66885213e-01  4.66885213e-01]
 [ 2.33442606e-01  4.66885213e-01  7.00327819e-01]
 [ 2.33442606e-01  7.00327819e-01  0.00000000e+00]
 [ 2.33442606e-01  7.00327819e-01  2.33442606e-01]
 [ 2.33442606e-01  7.00327819e-01  4.66885213e-01]
 [ 2.33442606e-01  7.00327819e-01  7.00327819e-01]
 [ 4.66885213e-01  2.62240176e-17  0.00000000e+00]
 [ 4.66885213e-01  1.31120088e-17  2.33442606e-01]
 [ 4.66885213e-01  0.00000000e+00  4.66885213e-01]
 [ 4.66885213e-01 -1.31120088e-17  7.00327819e-01]
 [ 4.66885213e-01  2.33442606e-01  0.00000000e+00]
 [ 4.66885213e-01  2.33442606e-01  2.33442606e-01]
 [ 4.66885213e-01  2.33442606e-01  4.66885213e-01]
 [ 4.66885213e-01  2.33442606e-01  7.00327819e-01]
 [ 4.66885213e-01  4.66885213e-01  0.00000000e+00]
 [ 4.66885213e-01  4.66885213e-01  2.33442606e-01]
 [ 4.66885213e-01  4.66885213e-01  4.66885213e-01]
 [ 4.66885213e-01  4.66885213e-01  7.00327819e-01]
 [ 4.66885213e-01  7.00327819e-01  0.00000000e+00]
 [ 4.66885213e-01  7.00327819e-01  2.33442606e-01]
 [ 4.66885213e-01  7.00327819e-01  4.66885213e-01]
 [ 4.66885213e-01  7.00327819e-01  7.00327819e-01]
 [ 7.00327819e-01  3.93360265e-17  0.00000000e+00]
 [ 7.00327819e-01  2.62240176e-17  2.33442606e-01]
 [ 7.00327819e-01  1.31120088e-17  4.66885213e-01]
 [ 7.00327819e-01 -1.54074396e-33  7.00327819e-01]
 [ 7.00327819e-01  2.33442606e-01  0.00000000e+00]
 [ 7.00327819e-01  2.33442606e-01  2.33442606e-01]
 [ 7.00327819e-01  2.33442606e-01  4.66885213e-01]
 [ 7.00327819e-01  2.33442606e-01  7.00327819e-01]
 [ 7.00327819e-01  4.66885213e-01  0.00000000e+00]
 [ 7.00327819e-01  4.66885213e-01  2.33442606e-01]
 [ 7.00327819e-01  4.66885213e-01  4.66885213e-01]
 [ 7.00327819e-01  4.66885213e-01  7.00327819e-01]
 [ 7.00327819e-01  7.00327819e-01  0.00000000e+00]
 [ 7.00327819e-01  7.00327819e-01  2.33442606e-01]
 [ 7.00327819e-01  7.00327819e-01  4.66885213e-01]
 [ 7.00327819e-01  7.00327819e-01  7.00327819e-01]]
Overwritten attributes  c0 tol kmesh  of <class 'fft_isdf.InterpolativeSeparableDensityFitting'>

WARN: ke_cutoff/mesh (120 / [35 35 35]) is not enough for FFTDF to get integral accuracy 1e-10.
Coulomb integral error is ~ 0.43 Eh.
Recommended ke_cutoff/mesh are 635.334 / [79 79 79].

kmesh = [4 4 4]
Input parent grid mesh = [9, 9, 9], ke_cutoff =  24.91
Final parent grid size = [9 9 9]

Selecting interpolation points
nkpts = 64, nao = 32, c0 =  20.00
Parent grid mesh = [9 9 9], grid size = 729

WARN: The parent grid might be too coarse.

    CPU time for select interpolation points    256.49 sec, wall time      4.02 sec
Pivoted Cholesky rank = 729, nip = 640, estimated error = 3.75e-03
Number of interpolation points = 640, effective CISDF =  20.00
    CPU time for building left-hand side     40.64 sec, wall time      0.64 sec

kpt = 64, ngrid = 42875, nao = 32
ngrid = 42875, blksize = 74888, nip = 640
required disk space = 28 GB
finished creating fswp: /central/scratch/yangjunjie/work/diamond-conv/gth-szv-molopt-sr/fftisdf-yang-20-120/4-4-4/47012910/1kg15ytq
blksize = 74888, memory for aoR_loop = 49078 MB
finished aoR_loop[       0:   42875]
    CPU time for building right-hand side    223.10 sec, wall time     30.92 sec
w[  0], rank =  640 /  640
    CPU time for w[  0]    554.90 sec, wall time      9.34 sec
w[  1], rank =  640 /  640
    CPU time for w[  1]     37.59 sec, wall time      0.98 sec
w[  2], rank =  640 /  640
    CPU time for w[  2]     36.94 sec, wall time      0.99 sec
w[  3], rank =  640 /  640
    CPU time for w[  3]     36.58 sec, wall time      0.99 sec
w[  4], rank =  640 /  640
    CPU time for w[  4]     36.77 sec, wall time      0.97 sec
w[  5], rank =  640 /  640
    CPU time for w[  5]     37.15 sec, wall time      0.99 sec
w[  6], rank =  640 /  640
    CPU time for w[  6]     37.00 sec, wall time      0.96 sec
w[  7], rank =  640 /  640
    CPU time for w[  7]     37.00 sec, wall time      0.99 sec
w[  8], rank =  640 /  640
    CPU time for w[  8]     36.55 sec, wall time      0.96 sec
w[  9], rank =  640 /  640
    CPU time for w[  9]     36.82 sec, wall time      0.97 sec
w[ 10], rank =  640 /  640
    CPU time for w[ 10]     36.93 sec, wall time      0.98 sec
w[ 11], rank =  640 /  640
    CPU time for w[ 11]     36.89 sec, wall time      0.97 sec
w[ 12], rank =  640 /  640
    CPU time for w[ 12]     36.66 sec, wall time      0.95 sec
w[ 13], rank =  640 /  640
    CPU time for w[ 13]     36.76 sec, wall time      0.96 sec
w[ 14], rank =  640 /  640
    CPU time for w[ 14]     36.62 sec, wall time      0.95 sec
w[ 15], rank =  640 /  640
    CPU time for w[ 15]     36.60 sec, wall time      0.95 sec
w[ 16], rank =  640 /  640
    CPU time for w[ 16]     36.68 sec, wall time      0.96 sec
w[ 17], rank =  640 /  640
    CPU time for w[ 17]     37.10 sec, wall time      0.98 sec
w[ 18], rank =  640 /  640
    CPU time for w[ 18]     37.66 sec, wall time      0.97 sec
w[ 19], rank =  640 /  640
    CPU time for w[ 19]     36.84 sec, wall time      0.96 sec
w[ 20], rank =  640 /  640
    CPU time for w[ 20]     36.73 sec, wall time      0.95 sec
w[ 21], rank =  640 /  640
    CPU time for w[ 21]     36.92 sec, wall time      0.97 sec
w[ 22], rank =  640 /  640
    CPU time for w[ 22]     36.79 sec, wall time      0.98 sec
w[ 23], rank =  640 /  640
    CPU time for w[ 23]     36.96 sec, wall time      0.97 sec
w[ 24], rank =  640 /  640
    CPU time for w[ 24]     37.03 sec, wall time      0.97 sec
w[ 25], rank =  640 /  640
    CPU time for w[ 25]     36.74 sec, wall time      0.96 sec
w[ 26], rank =  640 /  640
    CPU time for w[ 26]     36.69 sec, wall time      0.95 sec
w[ 27], rank =  640 /  640
    CPU time for w[ 27]     37.25 sec, wall time      0.98 sec
w[ 28], rank =  640 /  640
    CPU time for w[ 28]     36.68 sec, wall time      0.95 sec
w[ 29], rank =  640 /  640
    CPU time for w[ 29]     36.99 sec, wall time      0.98 sec
w[ 30], rank =  640 /  640
    CPU time for w[ 30]     36.67 sec, wall time      0.95 sec
w[ 31], rank =  640 /  640
    CPU time for w[ 31]     37.32 sec, wall time      0.99 sec
w[ 32], rank =  640 /  640
    CPU time for w[ 32]     36.76 sec, wall time      0.98 sec
w[ 33], rank =  640 /  640
    CPU time for w[ 33]     36.65 sec, wall time      0.97 sec
w[ 34], rank =  640 /  640
    CPU time for w[ 34]     36.89 sec, wall time      0.98 sec
w[ 35], rank =  640 /  640
    CPU time for w[ 35]     37.31 sec, wall time      0.98 sec
w[ 36], rank =  640 /  640
    CPU time for w[ 36]     36.93 sec, wall time      0.97 sec
w[ 37], rank =  640 /  640
    CPU time for w[ 37]     36.78 sec, wall time      0.95 sec
w[ 38], rank =  640 /  640
    CPU time for w[ 38]     37.41 sec, wall time      0.98 sec
w[ 39], rank =  640 /  640
    CPU time for w[ 39]     36.70 sec, wall time      0.99 sec
w[ 40], rank =  640 /  640
    CPU time for w[ 40]     36.26 sec, wall time      0.95 sec
w[ 41], rank =  640 /  640
    CPU time for w[ 41]     36.48 sec, wall time      0.95 sec
w[ 42], rank =  640 /  640
    CPU time for w[ 42]     36.05 sec, wall time      0.94 sec
w[ 43], rank =  640 /  640
    CPU time for w[ 43]     37.33 sec, wall time      0.98 sec
w[ 44], rank =  640 /  640
    CPU time for w[ 44]     37.99 sec, wall time      1.03 sec
w[ 45], rank =  640 /  640
    CPU time for w[ 45]     37.84 sec, wall time      0.99 sec
w[ 46], rank =  640 /  640
    CPU time for w[ 46]     39.96 sec, wall time      1.05 sec
w[ 47], rank =  640 /  640
    CPU time for w[ 47]     38.18 sec, wall time      1.02 sec
w[ 48], rank =  640 /  640
    CPU time for w[ 48]     37.28 sec, wall time      0.98 sec
w[ 49], rank =  640 /  640
    CPU time for w[ 49]     39.90 sec, wall time      1.05 sec
w[ 50], rank =  640 /  640
    CPU time for w[ 50]     36.92 sec, wall time      0.97 sec
w[ 51], rank =  640 /  640
    CPU time for w[ 51]     57.63 sec, wall time      1.40 sec
w[ 52], rank =  640 /  640
    CPU time for w[ 52]     37.06 sec, wall time      1.00 sec
w[ 53], rank =  640 /  640
    CPU time for w[ 53]     35.89 sec, wall time      0.95 sec
w[ 54], rank =  640 /  640
    CPU time for w[ 54]    214.73 sec, wall time      3.80 sec
w[ 55], rank =  640 /  640
    CPU time for w[ 55]     37.26 sec, wall time      0.97 sec
w[ 56], rank =  640 /  640
    CPU time for w[ 56]     37.74 sec, wall time      0.99 sec
w[ 57], rank =  640 /  640
    CPU time for w[ 57]     37.09 sec, wall time      0.98 sec
w[ 58], rank =  640 /  640
    CPU time for w[ 58]     37.83 sec, wall time      0.98 sec
w[ 59], rank =  640 /  640
    CPU time for w[ 59]     88.39 sec, wall time      1.81 sec
w[ 60], rank =  640 /  640
    CPU time for w[ 60]     37.87 sec, wall time      0.96 sec
w[ 61], rank =  640 /  640
    CPU time for w[ 61]     36.49 sec, wall time      0.94 sec
w[ 62], rank =  640 /  640
    CPU time for w[ 62]     36.92 sec, wall time      0.94 sec
w[ 63], rank =  640 /  640
    CPU time for w[ 63]    320.53 sec, wall time      5.57 sec
Saving FFTISDF results to /central/scratch/yangjunjie//work/diamond-conv/gth-szv-molopt-sr/fftisdf-yang-20-120/4-4-4//47012910/tmp.chk
    CPU time for building ISDF   3956.86 sec, wall time    115.66 sec
