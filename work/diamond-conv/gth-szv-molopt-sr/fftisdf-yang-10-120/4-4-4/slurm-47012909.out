OMP_NUM_THREADS = 64
MKL_NUM_THREADS = 1
PYSCF_MAX_MEMORY = 491520
TMPDIR = /central/scratch/yangjunjie//work/diamond-conv/gth-szv-molopt-sr/fftisdf-yang-10-120/4-4-4//47012909/
PYSCF_TMPDIR = /central/scratch/yangjunjie//work/diamond-conv/gth-szv-molopt-sr/fftisdf-yang-10-120/4-4-4//47012909/

/home/junjiey/anaconda3/envs/fftisdf/bin/python
2.7.0
1.14.1
1.26.4


******** <class 'fft_isdf.InterpolativeSeparableDensityFitting'> ********
mesh = [35 35 35] (42875 PWs)
len(kpts) = 64
    kpts = [[ 0.00000000e+00  0.00000000e+00  0.00000000e+00]
 [-1.31120088e-17 -1.31120088e-17  2.33442606e-01]
 [-2.62240176e-17 -2.62240176e-17  4.66885213e-01]
 [-3.93360265e-17 -3.93360265e-17  7.00327819e-01]
 [ 0.00000000e+00  2.33442606e-01  0.00000000e+00]
 [-1.31120088e-17  2.33442606e-01  2.33442606e-01]
 [-2.62240176e-17  2.33442606e-01  4.66885213e-01]
 [-3.93360265e-17  2.33442606e-01  7.00327819e-01]
 [ 0.00000000e+00  4.66885213e-01  0.00000000e+00]
 [-1.31120088e-17  4.66885213e-01  2.33442606e-01]
 [-2.62240176e-17  4.66885213e-01  4.66885213e-01]
 [-3.93360265e-17  4.66885213e-01  7.00327819e-01]
 [ 0.00000000e+00  7.00327819e-01  0.00000000e+00]
 [-1.31120088e-17  7.00327819e-01  2.33442606e-01]
 [-2.62240176e-17  7.00327819e-01  4.66885213e-01]
 [-3.93360265e-17  7.00327819e-01  7.00327819e-01]
 [ 2.33442606e-01  1.31120088e-17  0.00000000e+00]
 [ 2.33442606e-01  0.00000000e+00  2.33442606e-01]
 [ 2.33442606e-01 -1.31120088e-17  4.66885213e-01]
 [ 2.33442606e-01 -2.62240176e-17  7.00327819e-01]
 [ 2.33442606e-01  2.33442606e-01  0.00000000e+00]
 [ 2.33442606e-01  2.33442606e-01  2.33442606e-01]
 [ 2.33442606e-01  2.33442606e-01  4.66885213e-01]
 [ 2.33442606e-01  2.33442606e-01  7.00327819e-01]
 [ 2.33442606e-01  4.66885213e-01  0.00000000e+00]
 [ 2.33442606e-01  4.66885213e-01  2.33442606e-01]
 [ 2.33442606e-01  4.66885213e-01  4.66885213e-01]
 [ 2.33442606e-01  4.66885213e-01  7.00327819e-01]
 [ 2.33442606e-01  7.00327819e-01  0.00000000e+00]
 [ 2.33442606e-01  7.00327819e-01  2.33442606e-01]
 [ 2.33442606e-01  7.00327819e-01  4.66885213e-01]
 [ 2.33442606e-01  7.00327819e-01  7.00327819e-01]
 [ 4.66885213e-01  2.62240176e-17  0.00000000e+00]
 [ 4.66885213e-01  1.31120088e-17  2.33442606e-01]
 [ 4.66885213e-01  0.00000000e+00  4.66885213e-01]
 [ 4.66885213e-01 -1.31120088e-17  7.00327819e-01]
 [ 4.66885213e-01  2.33442606e-01  0.00000000e+00]
 [ 4.66885213e-01  2.33442606e-01  2.33442606e-01]
 [ 4.66885213e-01  2.33442606e-01  4.66885213e-01]
 [ 4.66885213e-01  2.33442606e-01  7.00327819e-01]
 [ 4.66885213e-01  4.66885213e-01  0.00000000e+00]
 [ 4.66885213e-01  4.66885213e-01  2.33442606e-01]
 [ 4.66885213e-01  4.66885213e-01  4.66885213e-01]
 [ 4.66885213e-01  4.66885213e-01  7.00327819e-01]
 [ 4.66885213e-01  7.00327819e-01  0.00000000e+00]
 [ 4.66885213e-01  7.00327819e-01  2.33442606e-01]
 [ 4.66885213e-01  7.00327819e-01  4.66885213e-01]
 [ 4.66885213e-01  7.00327819e-01  7.00327819e-01]
 [ 7.00327819e-01  3.93360265e-17  0.00000000e+00]
 [ 7.00327819e-01  2.62240176e-17  2.33442606e-01]
 [ 7.00327819e-01  1.31120088e-17  4.66885213e-01]
 [ 7.00327819e-01 -1.54074396e-33  7.00327819e-01]
 [ 7.00327819e-01  2.33442606e-01  0.00000000e+00]
 [ 7.00327819e-01  2.33442606e-01  2.33442606e-01]
 [ 7.00327819e-01  2.33442606e-01  4.66885213e-01]
 [ 7.00327819e-01  2.33442606e-01  7.00327819e-01]
 [ 7.00327819e-01  4.66885213e-01  0.00000000e+00]
 [ 7.00327819e-01  4.66885213e-01  2.33442606e-01]
 [ 7.00327819e-01  4.66885213e-01  4.66885213e-01]
 [ 7.00327819e-01  4.66885213e-01  7.00327819e-01]
 [ 7.00327819e-01  7.00327819e-01  0.00000000e+00]
 [ 7.00327819e-01  7.00327819e-01  2.33442606e-01]
 [ 7.00327819e-01  7.00327819e-01  4.66885213e-01]
 [ 7.00327819e-01  7.00327819e-01  7.00327819e-01]]
Overwritten attributes  kmesh c0 tol  of <class 'fft_isdf.InterpolativeSeparableDensityFitting'>

WARN: ke_cutoff/mesh (120 / [35 35 35]) is not enough for FFTDF to get integral accuracy 1e-10.
Coulomb integral error is ~ 0.43 Eh.
Recommended ke_cutoff/mesh are 635.334 / [79 79 79].

kmesh = [4 4 4]
Input parent grid mesh = [7, 7, 7], ke_cutoff =  14.01
Final parent grid size = [7 7 7]

Selecting interpolation points
nkpts = 64, nao = 32, c0 =  10.00
Parent grid mesh = [7 7 7], grid size = 343

WARN: The parent grid might be too coarse.

    CPU time for select interpolation points    129.85 sec, wall time      2.04 sec
Pivoted Cholesky rank = 343, nip = 320, estimated error = 2.26e-02
Number of interpolation points = 320, effective CISDF =  10.00
    CPU time for building left-hand side     18.48 sec, wall time      0.34 sec

kpt = 64, ngrid = 42875, nao = 32
ngrid = 42875, blksize = 149882, nip = 320
required disk space = 14 GB
finished creating fswp: /central/scratch/yangjunjie/work/diamond-conv/gth-szv-molopt-sr/fftisdf-yang-10-120/4-4-4/47012909/yi6cwl63
blksize = 149882, memory for aoR_loop = 49113 MB
finished aoR_loop[       0:   42875]
    CPU time for building right-hand side    148.42 sec, wall time     15.12 sec
w[  0], rank =  320 /  320
    CPU time for w[  0]    424.59 sec, wall time      7.04 sec
w[  1], rank =  320 /  320
    CPU time for w[  1]     21.40 sec, wall time      0.47 sec
w[  2], rank =  320 /  320
    CPU time for w[  2]     21.22 sec, wall time      0.48 sec
w[  3], rank =  320 /  320
    CPU time for w[  3]     22.28 sec, wall time      0.49 sec
w[  4], rank =  320 /  320
    CPU time for w[  4]     21.37 sec, wall time      0.50 sec
w[  5], rank =  320 /  320
    CPU time for w[  5]     22.34 sec, wall time      0.52 sec
w[  6], rank =  320 /  320
    CPU time for w[  6]     21.27 sec, wall time      0.50 sec
w[  7], rank =  320 /  320
    CPU time for w[  7]     21.33 sec, wall time      0.48 sec
w[  8], rank =  320 /  320
    CPU time for w[  8]     21.34 sec, wall time      0.48 sec
w[  9], rank =  320 /  320
    CPU time for w[  9]     21.33 sec, wall time      0.48 sec
w[ 10], rank =  320 /  320
    CPU time for w[ 10]     21.37 sec, wall time      0.50 sec
w[ 11], rank =  320 /  320
    CPU time for w[ 11]     21.26 sec, wall time      0.51 sec
w[ 12], rank =  320 /  320
    CPU time for w[ 12]     67.45 sec, wall time      1.21 sec
w[ 13], rank =  320 /  320
    CPU time for w[ 13]     21.25 sec, wall time      0.50 sec
w[ 14], rank =  320 /  320
    CPU time for w[ 14]     21.40 sec, wall time      0.48 sec
w[ 15], rank =  320 /  320
    CPU time for w[ 15]     21.22 sec, wall time      0.48 sec
w[ 16], rank =  320 /  320
    CPU time for w[ 16]     23.09 sec, wall time      0.56 sec
w[ 17], rank =  320 /  320
    CPU time for w[ 17]     21.21 sec, wall time      0.49 sec
w[ 18], rank =  320 /  320
    CPU time for w[ 18]     21.66 sec, wall time      0.48 sec
w[ 19], rank =  320 /  320
    CPU time for w[ 19]     21.43 sec, wall time      0.51 sec
w[ 20], rank =  320 /  320
    CPU time for w[ 20]     22.86 sec, wall time      0.54 sec
w[ 21], rank =  320 /  320
    CPU time for w[ 21]     34.24 sec, wall time      0.70 sec
w[ 22], rank =  320 /  320
    CPU time for w[ 22]     21.55 sec, wall time      0.52 sec
w[ 23], rank =  320 /  320
    CPU time for w[ 23]     21.01 sec, wall time      0.48 sec
w[ 24], rank =  320 /  320
    CPU time for w[ 24]     21.30 sec, wall time      0.47 sec
w[ 25], rank =  320 /  320
    CPU time for w[ 25]     21.18 sec, wall time      0.47 sec
w[ 26], rank =  320 /  320
    CPU time for w[ 26]     21.29 sec, wall time      0.46 sec
w[ 27], rank =  320 /  320
    CPU time for w[ 27]     21.63 sec, wall time      0.48 sec
w[ 28], rank =  320 /  320
    CPU time for w[ 28]     21.54 sec, wall time      0.49 sec
w[ 29], rank =  320 /  320
    CPU time for w[ 29]     21.46 sec, wall time      0.54 sec
w[ 30], rank =  320 /  320
    CPU time for w[ 30]     21.45 sec, wall time      0.48 sec
w[ 31], rank =  320 /  320
    CPU time for w[ 31]     21.05 sec, wall time      0.52 sec
w[ 32], rank =  320 /  320
    CPU time for w[ 32]     21.49 sec, wall time      0.48 sec
w[ 33], rank =  320 /  320
    CPU time for w[ 33]     21.20 sec, wall time      0.47 sec
w[ 34], rank =  320 /  320
    CPU time for w[ 34]     21.40 sec, wall time      0.50 sec
w[ 35], rank =  320 /  320
    CPU time for w[ 35]     21.43 sec, wall time      0.47 sec
w[ 36], rank =  320 /  320
    CPU time for w[ 36]     21.39 sec, wall time      0.49 sec
w[ 37], rank =  320 /  320
    CPU time for w[ 37]     21.18 sec, wall time      0.46 sec
w[ 38], rank =  320 /  320
    CPU time for w[ 38]     21.32 sec, wall time      0.46 sec
w[ 39], rank =  320 /  320
    CPU time for w[ 39]     21.17 sec, wall time      0.49 sec
w[ 40], rank =  320 /  320
    CPU time for w[ 40]     21.22 sec, wall time      0.49 sec
w[ 41], rank =  320 /  320
    CPU time for w[ 41]     21.17 sec, wall time      0.47 sec
w[ 42], rank =  320 /  320
    CPU time for w[ 42]     21.88 sec, wall time      0.49 sec
w[ 43], rank =  320 /  320
    CPU time for w[ 43]     21.32 sec, wall time      0.48 sec
w[ 44], rank =  320 /  320
    CPU time for w[ 44]     21.65 sec, wall time      0.50 sec
w[ 45], rank =  320 /  320
    CPU time for w[ 45]     21.02 sec, wall time      0.52 sec
w[ 46], rank =  320 /  320
    CPU time for w[ 46]     21.22 sec, wall time      0.47 sec
w[ 47], rank =  320 /  320
    CPU time for w[ 47]     21.27 sec, wall time      0.50 sec
w[ 48], rank =  320 /  320
    CPU time for w[ 48]     21.60 sec, wall time      0.47 sec
w[ 49], rank =  320 /  320
    CPU time for w[ 49]     27.36 sec, wall time      0.60 sec
w[ 50], rank =  320 /  320
    CPU time for w[ 50]     21.74 sec, wall time      0.51 sec
w[ 51], rank =  320 /  320
    CPU time for w[ 51]     21.47 sec, wall time      0.51 sec
w[ 52], rank =  320 /  320
    CPU time for w[ 52]     21.49 sec, wall time      0.49 sec
w[ 53], rank =  320 /  320
    CPU time for w[ 53]     21.35 sec, wall time      0.49 sec
w[ 54], rank =  320 /  320
    CPU time for w[ 54]     21.41 sec, wall time      0.46 sec
w[ 55], rank =  320 /  320
    CPU time for w[ 55]     21.21 sec, wall time      0.48 sec
w[ 56], rank =  320 /  320
    CPU time for w[ 56]     21.45 sec, wall time      0.47 sec
w[ 57], rank =  320 /  320
    CPU time for w[ 57]     21.19 sec, wall time      0.46 sec
w[ 58], rank =  320 /  320
    CPU time for w[ 58]     21.37 sec, wall time      0.47 sec
w[ 59], rank =  320 /  320
    CPU time for w[ 59]     21.18 sec, wall time      0.48 sec
w[ 60], rank =  320 /  320
    CPU time for w[ 60]     21.44 sec, wall time      0.48 sec
w[ 61], rank =  320 /  320
    CPU time for w[ 61]     21.20 sec, wall time      0.48 sec
w[ 62], rank =  320 /  320
    CPU time for w[ 62]     21.45 sec, wall time      0.48 sec
w[ 63], rank =  320 /  320
    CPU time for w[ 63]    138.87 sec, wall time      2.37 sec
Saving FFTISDF results to /central/scratch/yangjunjie//work/diamond-conv/gth-szv-molopt-sr/fftisdf-yang-10-120/4-4-4//47012909/tmp.chk
    CPU time for building ISDF   2263.14 sec, wall time     58.55 sec
