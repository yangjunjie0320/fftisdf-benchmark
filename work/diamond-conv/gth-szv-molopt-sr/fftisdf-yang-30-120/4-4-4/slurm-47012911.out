OMP_NUM_THREADS = 64
MKL_NUM_THREADS = 1
PYSCF_MAX_MEMORY = 491520
TMPDIR = /central/scratch/yangjunjie//work/diamond-conv/gth-szv-molopt-sr/fftisdf-yang-30-120/4-4-4//47012911/
PYSCF_TMPDIR = /central/scratch/yangjunjie//work/diamond-conv/gth-szv-molopt-sr/fftisdf-yang-30-120/4-4-4//47012911/

/home/junjiey/anaconda3/envs/fftisdf/bin/python
2.7.0
1.14.1
1.26.4


******** <class 'fft_isdf.InterpolativeSeparableDensityFitting'> ********
mesh = [35 35 35] (42875 PWs)
len(kpts) = 64
    kpts = [[ 0.00000000e+00  0.00000000e+00  0.00000000e+00]
 [-1.31120088e-17 -1.31120088e-17  2.33442606e-01]
 [-2.62240176e-17 -2.62240176e-17  4.66885213e-01]
 [-3.93360265e-17 -3.93360265e-17  7.00327819e-01]
 [ 0.00000000e+00  2.33442606e-01  0.00000000e+00]
 [-1.31120088e-17  2.33442606e-01  2.33442606e-01]
 [-2.62240176e-17  2.33442606e-01  4.66885213e-01]
 [-3.93360265e-17  2.33442606e-01  7.00327819e-01]
 [ 0.00000000e+00  4.66885213e-01  0.00000000e+00]
 [-1.31120088e-17  4.66885213e-01  2.33442606e-01]
 [-2.62240176e-17  4.66885213e-01  4.66885213e-01]
 [-3.93360265e-17  4.66885213e-01  7.00327819e-01]
 [ 0.00000000e+00  7.00327819e-01  0.00000000e+00]
 [-1.31120088e-17  7.00327819e-01  2.33442606e-01]
 [-2.62240176e-17  7.00327819e-01  4.66885213e-01]
 [-3.93360265e-17  7.00327819e-01  7.00327819e-01]
 [ 2.33442606e-01  1.31120088e-17  0.00000000e+00]
 [ 2.33442606e-01  0.00000000e+00  2.33442606e-01]
 [ 2.33442606e-01 -1.31120088e-17  4.66885213e-01]
 [ 2.33442606e-01 -2.62240176e-17  7.00327819e-01]
 [ 2.33442606e-01  2.33442606e-01  0.00000000e+00]
 [ 2.33442606e-01  2.33442606e-01  2.33442606e-01]
 [ 2.33442606e-01  2.33442606e-01  4.66885213e-01]
 [ 2.33442606e-01  2.33442606e-01  7.00327819e-01]
 [ 2.33442606e-01  4.66885213e-01  0.00000000e+00]
 [ 2.33442606e-01  4.66885213e-01  2.33442606e-01]
 [ 2.33442606e-01  4.66885213e-01  4.66885213e-01]
 [ 2.33442606e-01  4.66885213e-01  7.00327819e-01]
 [ 2.33442606e-01  7.00327819e-01  0.00000000e+00]
 [ 2.33442606e-01  7.00327819e-01  2.33442606e-01]
 [ 2.33442606e-01  7.00327819e-01  4.66885213e-01]
 [ 2.33442606e-01  7.00327819e-01  7.00327819e-01]
 [ 4.66885213e-01  2.62240176e-17  0.00000000e+00]
 [ 4.66885213e-01  1.31120088e-17  2.33442606e-01]
 [ 4.66885213e-01  0.00000000e+00  4.66885213e-01]
 [ 4.66885213e-01 -1.31120088e-17  7.00327819e-01]
 [ 4.66885213e-01  2.33442606e-01  0.00000000e+00]
 [ 4.66885213e-01  2.33442606e-01  2.33442606e-01]
 [ 4.66885213e-01  2.33442606e-01  4.66885213e-01]
 [ 4.66885213e-01  2.33442606e-01  7.00327819e-01]
 [ 4.66885213e-01  4.66885213e-01  0.00000000e+00]
 [ 4.66885213e-01  4.66885213e-01  2.33442606e-01]
 [ 4.66885213e-01  4.66885213e-01  4.66885213e-01]
 [ 4.66885213e-01  4.66885213e-01  7.00327819e-01]
 [ 4.66885213e-01  7.00327819e-01  0.00000000e+00]
 [ 4.66885213e-01  7.00327819e-01  2.33442606e-01]
 [ 4.66885213e-01  7.00327819e-01  4.66885213e-01]
 [ 4.66885213e-01  7.00327819e-01  7.00327819e-01]
 [ 7.00327819e-01  3.93360265e-17  0.00000000e+00]
 [ 7.00327819e-01  2.62240176e-17  2.33442606e-01]
 [ 7.00327819e-01  1.31120088e-17  4.66885213e-01]
 [ 7.00327819e-01 -1.54074396e-33  7.00327819e-01]
 [ 7.00327819e-01  2.33442606e-01  0.00000000e+00]
 [ 7.00327819e-01  2.33442606e-01  2.33442606e-01]
 [ 7.00327819e-01  2.33442606e-01  4.66885213e-01]
 [ 7.00327819e-01  2.33442606e-01  7.00327819e-01]
 [ 7.00327819e-01  4.66885213e-01  0.00000000e+00]
 [ 7.00327819e-01  4.66885213e-01  2.33442606e-01]
 [ 7.00327819e-01  4.66885213e-01  4.66885213e-01]
 [ 7.00327819e-01  4.66885213e-01  7.00327819e-01]
 [ 7.00327819e-01  7.00327819e-01  0.00000000e+00]
 [ 7.00327819e-01  7.00327819e-01  2.33442606e-01]
 [ 7.00327819e-01  7.00327819e-01  4.66885213e-01]
 [ 7.00327819e-01  7.00327819e-01  7.00327819e-01]]
Overwritten attributes  tol c0 kmesh  of <class 'fft_isdf.InterpolativeSeparableDensityFitting'>

WARN: ke_cutoff/mesh (120 / [35 35 35]) is not enough for FFTDF to get integral accuracy 1e-10.
Coulomb integral error is ~ 0.43 Eh.
Recommended ke_cutoff/mesh are 635.334 / [79 79 79].

kmesh = [4 4 4]
Input parent grid mesh = [10, 10, 10], ke_cutoff =  24.91
Final parent grid size = [9 9 9]

Selecting interpolation points
nkpts = 64, nao = 32, c0 =  30.00
Parent grid mesh = [9 9 9], grid size = 729

WARN: The parent grid might be too coarse.

    CPU time for select interpolation points    233.82 sec, wall time      3.67 sec
Pivoted Cholesky rank = 729, nip = 729, estimated error = 5.43e-04
Number of interpolation points = 729, effective CISDF =  22.78
    CPU time for building left-hand side     37.64 sec, wall time      0.66 sec

kpt = 64, ngrid = 42875, nao = 32
ngrid = 42875, blksize = 65707, nip = 729
required disk space = 32 GB
finished creating fswp: /central/scratch/yangjunjie/work/diamond-conv/gth-szv-molopt-sr/fftisdf-yang-30-120/4-4-4/47012911/3evs7sds
blksize = 65707, memory for aoR_loop = 49050 MB
finished aoR_loop[       0:   42875]
    CPU time for building right-hand side    258.56 sec, wall time     33.64 sec
w[  0], rank =  729 /  729
    CPU time for w[  0]    232.14 sec, wall time      4.34 sec
w[  1], rank =  729 /  729
    CPU time for w[  1]     41.10 sec, wall time      1.09 sec
w[  2], rank =  729 /  729
    CPU time for w[  2]     41.02 sec, wall time      1.11 sec
w[  3], rank =  729 /  729
    CPU time for w[  3]     41.93 sec, wall time      1.13 sec
w[  4], rank =  729 /  729
    CPU time for w[  4]     42.71 sec, wall time      1.14 sec
w[  5], rank =  729 /  729
    CPU time for w[  5]     42.45 sec, wall time      1.14 sec
w[  6], rank =  729 /  729
    CPU time for w[  6]     42.25 sec, wall time      1.12 sec
w[  7], rank =  729 /  729
    CPU time for w[  7]     41.79 sec, wall time      1.12 sec
w[  8], rank =  729 /  729
    CPU time for w[  8]     41.89 sec, wall time      1.14 sec
w[  9], rank =  729 /  729
    CPU time for w[  9]     41.96 sec, wall time      1.14 sec
w[ 10], rank =  729 /  729
    CPU time for w[ 10]     41.53 sec, wall time      1.11 sec
w[ 11], rank =  729 /  729
    CPU time for w[ 11]     42.17 sec, wall time      1.13 sec
w[ 12], rank =  729 /  729
    CPU time for w[ 12]     41.81 sec, wall time      1.12 sec
w[ 13], rank =  729 /  729
    CPU time for w[ 13]     41.41 sec, wall time      1.09 sec
w[ 14], rank =  729 /  729
    CPU time for w[ 14]     41.82 sec, wall time      1.10 sec
w[ 15], rank =  729 /  729
    CPU time for w[ 15]     42.23 sec, wall time      1.13 sec
w[ 16], rank =  729 /  729
    CPU time for w[ 16]     41.56 sec, wall time      1.10 sec
w[ 17], rank =  729 /  729
    CPU time for w[ 17]     41.75 sec, wall time      1.10 sec
w[ 18], rank =  729 /  729
    CPU time for w[ 18]     42.21 sec, wall time      1.12 sec
w[ 19], rank =  729 /  729
    CPU time for w[ 19]     42.52 sec, wall time      1.16 sec
w[ 20], rank =  729 /  729
    CPU time for w[ 20]     49.44 sec, wall time      1.26 sec
w[ 21], rank =  729 /  729
    CPU time for w[ 21]     43.31 sec, wall time      1.23 sec
w[ 22], rank =  729 /  729
    CPU time for w[ 22]     46.37 sec, wall time      1.24 sec
w[ 23], rank =  729 /  729
    CPU time for w[ 23]     43.18 sec, wall time      1.23 sec
w[ 24], rank =  729 /  729
    CPU time for w[ 24]     42.31 sec, wall time      1.20 sec
w[ 25], rank =  729 /  729
    CPU time for w[ 25]     42.36 sec, wall time      1.15 sec
w[ 26], rank =  729 /  729
    CPU time for w[ 26]     41.98 sec, wall time      1.14 sec
w[ 27], rank =  729 /  729
    CPU time for w[ 27]     42.49 sec, wall time      1.14 sec
w[ 28], rank =  729 /  729
    CPU time for w[ 28]     42.15 sec, wall time      1.11 sec
w[ 29], rank =  729 /  729
    CPU time for w[ 29]     42.11 sec, wall time      1.13 sec
w[ 30], rank =  729 /  729
    CPU time for w[ 30]     42.27 sec, wall time      1.13 sec
w[ 31], rank =  729 /  729
    CPU time for w[ 31]     42.97 sec, wall time      1.13 sec
w[ 32], rank =  729 /  729
    CPU time for w[ 32]     40.95 sec, wall time      1.11 sec
w[ 33], rank =  729 /  729
    CPU time for w[ 33]     42.11 sec, wall time      1.13 sec
w[ 34], rank =  729 /  729
    CPU time for w[ 34]     42.00 sec, wall time      1.13 sec
w[ 35], rank =  729 /  729
    CPU time for w[ 35]     41.81 sec, wall time      1.14 sec
w[ 36], rank =  729 /  729
    CPU time for w[ 36]     41.76 sec, wall time      1.13 sec
w[ 37], rank =  729 /  729
    CPU time for w[ 37]     41.61 sec, wall time      1.14 sec
w[ 38], rank =  729 /  729
    CPU time for w[ 38]     41.91 sec, wall time      1.15 sec
w[ 39], rank =  729 /  729
    CPU time for w[ 39]     41.40 sec, wall time      1.11 sec
w[ 40], rank =  729 /  729
    CPU time for w[ 40]     41.43 sec, wall time      1.10 sec
w[ 41], rank =  729 /  729
    CPU time for w[ 41]     41.39 sec, wall time      1.10 sec
w[ 42], rank =  729 /  729
    CPU time for w[ 42]     41.14 sec, wall time      1.10 sec
w[ 43], rank =  729 /  729
    CPU time for w[ 43]     41.86 sec, wall time      1.13 sec
w[ 44], rank =  729 /  729
    CPU time for w[ 44]     42.01 sec, wall time      1.11 sec
w[ 45], rank =  729 /  729
    CPU time for w[ 45]     41.21 sec, wall time      1.09 sec
w[ 46], rank =  729 /  729
    CPU time for w[ 46]     43.22 sec, wall time      1.13 sec
w[ 47], rank =  729 /  729
    CPU time for w[ 47]     41.81 sec, wall time      1.13 sec
w[ 48], rank =  729 /  729
    CPU time for w[ 48]     41.23 sec, wall time      1.10 sec
w[ 49], rank =  729 /  729
    CPU time for w[ 49]     41.39 sec, wall time      1.09 sec
w[ 50], rank =  729 /  729
    CPU time for w[ 50]     41.37 sec, wall time      1.10 sec
w[ 51], rank =  729 /  729
    CPU time for w[ 51]     41.63 sec, wall time      1.11 sec
w[ 52], rank =  729 /  729
    CPU time for w[ 52]     41.44 sec, wall time      1.10 sec
w[ 53], rank =  729 /  729
    CPU time for w[ 53]     42.57 sec, wall time      1.20 sec
w[ 54], rank =  729 /  729
    CPU time for w[ 54]     41.69 sec, wall time      1.15 sec
w[ 55], rank =  729 /  729
    CPU time for w[ 55]     41.15 sec, wall time      1.10 sec
w[ 56], rank =  729 /  729
    CPU time for w[ 56]     41.34 sec, wall time      1.09 sec
w[ 57], rank =  729 /  729
    CPU time for w[ 57]     41.39 sec, wall time      1.09 sec
w[ 58], rank =  729 /  729
    CPU time for w[ 58]     41.82 sec, wall time      1.10 sec
w[ 59], rank =  729 /  729
    CPU time for w[ 59]     41.92 sec, wall time      1.11 sec
w[ 60], rank =  729 /  729
    CPU time for w[ 60]     41.69 sec, wall time      1.10 sec
w[ 61], rank =  729 /  729
    CPU time for w[ 61]     41.61 sec, wall time      1.10 sec
w[ 62], rank =  729 /  729
    CPU time for w[ 62]     41.51 sec, wall time      1.09 sec
w[ 63], rank =  729 /  729
    CPU time for w[ 63]     41.81 sec, wall time      1.11 sec
Saving FFTISDF results to /central/scratch/yangjunjie//work/diamond-conv/gth-szv-molopt-sr/fftisdf-yang-30-120/4-4-4//47012911/tmp.chk
    CPU time for building ISDF   3426.74 sec, wall time    114.08 sec
