OMP_NUM_THREADS = 64
MKL_NUM_THREADS = 1
PYSCF_MAX_MEMORY = 491520
TMPDIR = /central/scratch/yangjunjie//fftisdf-yang-10-15-15-15-cco-2x2-frac-4-4-4-gth-szv-molopt-sr/46936254/
PYSCF_TMPDIR = /central/scratch/yangjunjie//fftisdf-yang-10-15-15-15-cco-2x2-frac-4-4-4-gth-szv-molopt-sr/46936254/

/home/junjiey/anaconda3/envs/fftisdf/bin/python
2.7.0
1.14.1
1.26.4
WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.



******** <class 'fft_isdf.InterpolativeSeparableDensityFitting'> ********
mesh = [95 95 41] (370025 PWs)
len(kpts) = 64
    kpts = [[0.         0.         0.        ]
 [0.         0.         0.26135187]
 [0.         0.         0.52270374]
 [0.         0.         0.78405561]
 [0.         0.10779511 0.        ]
 [0.         0.10779511 0.26135187]
 [0.         0.10779511 0.52270374]
 [0.         0.10779511 0.78405561]
 [0.         0.21559021 0.        ]
 [0.         0.21559021 0.26135187]
 [0.         0.21559021 0.52270374]
 [0.         0.21559021 0.78405561]
 [0.         0.32338532 0.        ]
 [0.         0.32338532 0.26135187]
 [0.         0.32338532 0.52270374]
 [0.         0.32338532 0.78405561]
 [0.10779511 0.         0.        ]
 [0.10779511 0.         0.26135187]
 [0.10779511 0.         0.52270374]
 [0.10779511 0.         0.78405561]
 [0.10779511 0.10779511 0.        ]
 [0.10779511 0.10779511 0.26135187]
 [0.10779511 0.10779511 0.52270374]
 [0.10779511 0.10779511 0.78405561]
 [0.10779511 0.21559021 0.        ]
 [0.10779511 0.21559021 0.26135187]
 [0.10779511 0.21559021 0.52270374]
 [0.10779511 0.21559021 0.78405561]
 [0.10779511 0.32338532 0.        ]
 [0.10779511 0.32338532 0.26135187]
 [0.10779511 0.32338532 0.52270374]
 [0.10779511 0.32338532 0.78405561]
 [0.21559021 0.         0.        ]
 [0.21559021 0.         0.26135187]
 [0.21559021 0.         0.52270374]
 [0.21559021 0.         0.78405561]
 [0.21559021 0.10779511 0.        ]
 [0.21559021 0.10779511 0.26135187]
 [0.21559021 0.10779511 0.52270374]
 [0.21559021 0.10779511 0.78405561]
 [0.21559021 0.21559021 0.        ]
 [0.21559021 0.21559021 0.26135187]
 [0.21559021 0.21559021 0.52270374]
 [0.21559021 0.21559021 0.78405561]
 [0.21559021 0.32338532 0.        ]
 [0.21559021 0.32338532 0.26135187]
 [0.21559021 0.32338532 0.52270374]
 [0.21559021 0.32338532 0.78405561]
 [0.32338532 0.         0.        ]
 [0.32338532 0.         0.26135187]
 [0.32338532 0.         0.52270374]
 [0.32338532 0.         0.78405561]
 [0.32338532 0.10779511 0.        ]
 [0.32338532 0.10779511 0.26135187]
 [0.32338532 0.10779511 0.52270374]
 [0.32338532 0.10779511 0.78405561]
 [0.32338532 0.21559021 0.        ]
 [0.32338532 0.21559021 0.26135187]
 [0.32338532 0.21559021 0.52270374]
 [0.32338532 0.21559021 0.78405561]
 [0.32338532 0.32338532 0.        ]
 [0.32338532 0.32338532 0.26135187]
 [0.32338532 0.32338532 0.52270374]
 [0.32338532 0.32338532 0.78405561]]
Overwritten attributes  tol c0 m0 kmesh  of <class 'fft_isdf.InterpolativeSeparableDensityFitting'>

WARN: ke_cutoff/mesh (200 / [95 95 41]) is not enough for FFTDF to get integral accuracy 1e-08.
Coulomb integral error is ~ 10 Eh.
Recommended ke_cutoff/mesh are 995.52 / [209 209  87].

kmesh = [4 4 4]
Input parent grid mesh = [15, 15, 15], ke_cutoff =  95.62
Final parent grid size = [35 35 15]

Selecting interpolation points
nkpts = 64, nao = 88, c0 =  10.00
Parent grid mesh = [35 35 15], grid size = 18375
    CPU time for select interpolation points   2024.36 sec, wall time     79.76 sec
Pivoted Cholesky rank = 4774, nip = 880, estimated error = 8.23e-02
Number of interpolation points = 880, effective CISDF =  10.00
    CPU time for building left-hand side     73.95 sec, wall time      1.39 sec

kpt = 64, ngrid = 370025, nao = 88
ngrid = 370025, blksize = 54379, nip = 880
required disk space = 333 GB
finished creating fswp: /central/scratch/yangjunjie/fftisdf-yang-10-15-15-15-cco-2x2-frac-4-4-4-gth-szv-molopt-sr/46936254/ck77mbs4
blksize = 54379, memory for aoR_loop = 49002 MB
finished aoR_loop[       0:   54379]
finished aoR_loop[   54379:  108758]
finished aoR_loop[  108758:  163137]
finished aoR_loop[  163137:  217516]
finished aoR_loop[  217516:  271895]
finished aoR_loop[  271895:  326274]
finished aoR_loop[  326274:  370025]
    CPU time for building right-hand side   3421.73 sec, wall time    391.10 sec
w[  0], rank =  880 /  880
    CPU time for w[  0]    691.05 sec, wall time     34.00 sec
w[  1], rank =  880 /  880
    CPU time for w[  1]    670.22 sec, wall time     26.99 sec
w[  2], rank =  880 /  880
    CPU time for w[  2]   1374.33 sec, wall time     36.73 sec
w[  3], rank =  880 /  880
    CPU time for w[  3]    664.77 sec, wall time     26.78 sec
w[  4], rank =  880 /  880
    CPU time for w[  4]    689.69 sec, wall time     26.36 sec
w[  5], rank =  880 /  880
    CPU time for w[  5]    664.22 sec, wall time     27.20 sec
w[  6], rank =  880 /  880
    CPU time for w[  6]   1090.39 sec, wall time     33.01 sec
w[  7], rank =  880 /  880
    CPU time for w[  7]    646.31 sec, wall time     29.14 sec
w[  8], rank =  880 /  880
    CPU time for w[  8]    669.61 sec, wall time     28.45 sec
w[  9], rank =  880 /  880
    CPU time for w[  9]    694.23 sec, wall time     27.72 sec
w[ 10], rank =  880 /  880
    CPU time for w[ 10]   1719.21 sec, wall time     44.23 sec
w[ 11], rank =  880 /  880
    CPU time for w[ 11]    649.16 sec, wall time     30.04 sec
w[ 12], rank =  880 /  880
    CPU time for w[ 12]    673.18 sec, wall time     28.25 sec
w[ 13], rank =  880 /  880
    CPU time for w[ 13]    656.30 sec, wall time     27.63 sec
w[ 14], rank =  880 /  880
    CPU time for w[ 14]    663.21 sec, wall time     26.43 sec
w[ 15], rank =  880 /  880
    CPU time for w[ 15]    669.66 sec, wall time     27.75 sec
w[ 16], rank =  880 /  880
    CPU time for w[ 16]    873.94 sec, wall time     29.26 sec
w[ 17], rank =  880 /  880
    CPU time for w[ 17]    952.33 sec, wall time     32.08 sec
w[ 18], rank =  880 /  880
    CPU time for w[ 18]    668.93 sec, wall time     26.43 sec
w[ 19], rank =  880 /  880
    CPU time for w[ 19]    681.37 sec, wall time     27.63 sec
w[ 20], rank =  880 /  880
    CPU time for w[ 20]    671.42 sec, wall time     26.68 sec
w[ 21], rank =  880 /  880
    CPU time for w[ 21]    676.36 sec, wall time     28.16 sec
w[ 22], rank =  880 /  880
    CPU time for w[ 22]    673.84 sec, wall time     26.73 sec
w[ 23], rank =  880 /  880
    CPU time for w[ 23]    669.30 sec, wall time     28.02 sec
w[ 24], rank =  880 /  880
    CPU time for w[ 24]    669.84 sec, wall time     28.54 sec
w[ 25], rank =  880 /  880
    CPU time for w[ 25]    662.57 sec, wall time     28.95 sec
w[ 26], rank =  880 /  880
    CPU time for w[ 26]    654.77 sec, wall time     26.62 sec
w[ 27], rank =  880 /  880
    CPU time for w[ 27]    669.48 sec, wall time     31.69 sec
w[ 28], rank =  880 /  880
    CPU time for w[ 28]    687.37 sec, wall time     30.29 sec
w[ 29], rank =  880 /  880
    CPU time for w[ 29]    682.69 sec, wall time     28.37 sec
w[ 30], rank =  880 /  880
    CPU time for w[ 30]   1946.90 sec, wall time     47.69 sec
w[ 31], rank =  880 /  880
    CPU time for w[ 31]    666.04 sec, wall time     31.65 sec
w[ 32], rank =  880 /  880
    CPU time for w[ 32]    674.21 sec, wall time     25.60 sec
w[ 33], rank =  880 /  880
    CPU time for w[ 33]    696.27 sec, wall time     27.76 sec
w[ 34], rank =  880 /  880
    CPU time for w[ 34]    663.55 sec, wall time     25.39 sec
w[ 35], rank =  880 /  880
    CPU time for w[ 35]    731.25 sec, wall time     28.92 sec
w[ 36], rank =  880 /  880
    CPU time for w[ 36]    676.55 sec, wall time     27.52 sec
w[ 37], rank =  880 /  880
    CPU time for w[ 37]    678.14 sec, wall time     28.00 sec
w[ 38], rank =  880 /  880
    CPU time for w[ 38]    673.71 sec, wall time     26.66 sec
w[ 39], rank =  880 /  880
    CPU time for w[ 39]    673.03 sec, wall time     27.70 sec
w[ 40], rank =  880 /  880
    CPU time for w[ 40]    673.03 sec, wall time     26.73 sec
w[ 41], rank =  880 /  880
    CPU time for w[ 41]    672.36 sec, wall time     26.97 sec
w[ 42], rank =  880 /  880
    CPU time for w[ 42]    666.36 sec, wall time     25.10 sec
w[ 43], rank =  880 /  880
    CPU time for w[ 43]    670.31 sec, wall time     27.43 sec
w[ 44], rank =  880 /  880
    CPU time for w[ 44]    682.93 sec, wall time     29.78 sec
w[ 45], rank =  880 /  880
    CPU time for w[ 45]    676.27 sec, wall time     28.05 sec
w[ 46], rank =  880 /  880
    CPU time for w[ 46]    661.40 sec, wall time     26.71 sec
w[ 47], rank =  880 /  880
    CPU time for w[ 47]    667.13 sec, wall time     28.08 sec
w[ 48], rank =  880 /  880
    CPU time for w[ 48]    674.04 sec, wall time     27.10 sec
w[ 49], rank =  880 /  880
    CPU time for w[ 49]    685.16 sec, wall time     28.94 sec
w[ 50], rank =  880 /  880
    CPU time for w[ 50]    665.74 sec, wall time     26.38 sec
w[ 51], rank =  880 /  880
    CPU time for w[ 51]    670.99 sec, wall time     27.82 sec
w[ 52], rank =  880 /  880
    CPU time for w[ 52]    682.05 sec, wall time     26.90 sec
