OMP_NUM_THREADS = 32
MKL_NUM_THREADS = 1
PYSCF_MAX_MEMORY = 245760
TMPDIR = /central/scratch/yangjunjie//fftisdf-ning-20/46905124/
PYSCF_TMPDIR = /central/scratch/yangjunjie//fftisdf-ning-20/46905124/

/home/junjiey/anaconda3/envs/fftisdf/bin/python
2.7.0
1.14.1
1.26.4
WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

LOADING ISDF BACKEND
NUM_THREADS   : 32
USE_NUMPY     : 0
USE_SCIPY     : 1
USE_TORCH     : 0
USE_TORCH_GPU : 0
ISDF module: /home/junjiey/packages/pyscf-forge/pyscf-forge-yangjunjie-non-orth/pyscf/isdf/isdf_local_k.py
WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

c0 =  20.00
       get_partition wall time:     0.132281 CPU time:     2.436234
len of partition[   0] =    729
len of partition[   1] =    576
len of partition[   2] =    576
len of partition[   3] =    576
len of partition[   4] =    648
len of partition[   5] =    512
len of partition[   6] =    648
len of partition[   7] =    648
len of partition[   8] =    729
len of partition[   9] =    576
len of partition[  10] =    576
len of partition[  11] =    576
len of partition[  12] =    648
len of partition[  13] =    512
len of partition[  14] =    648
len of partition[  15] =    648
len of partition[  16] =    729
len of partition[  17] =    576
len of partition[  18] =    576
len of partition[  19] =    576
len of partition[  20] =    648
len of partition[  21] =    512
len of partition[  22] =    648
len of partition[  23] =    648
len of partition[  24] =    729
len of partition[  25] =    576
len of partition[  26] =    576
len of partition[  27] =    576
len of partition[  28] =    648
len of partition[  29] =    512
len of partition[  30] =    648
len of partition[  31] =    648
len of partition[  32] =    729
len of partition[  33] =    576
len of partition[  34] =    576
len of partition[  35] =    576
len of partition[  36] =    648
len of partition[  37] =    512
len of partition[  38] =    648
len of partition[  39] =    648
len of partition[  40] =    729
len of partition[  41] =    576
len of partition[  42] =    576
len of partition[  43] =    576
len of partition[  44] =    648
len of partition[  45] =    512
len of partition[  46] =    648
len of partition[  47] =    648
len of partition[  48] =    729
len of partition[  49] =    576
len of partition[  50] =    576
len of partition[  51] =    576
len of partition[  52] =    648
len of partition[  53] =    512
len of partition[  54] =    648
len of partition[  55] =    648
len of partition[  56] =    729
len of partition[  57] =    576
len of partition[  58] =    576
len of partition[  59] =    576
len of partition[  60] =    648
len of partition[  61] =    512
len of partition[  62] =    648
len of partition[  63] =    648
WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

             get_aoR wall time:     0.223849 CPU time:     6.545429
In _build_buffer: ISDF Local size of buffer = 121.416 MB
 ---------- In pyscf.isdf.isdf_local.select_IP_local_atm ----------
select_IP_local_atm: atm_begin =    0, atm_end =    8
select_IP_local_atm: npt_found =  606
select_IP_local_atm: npt_found =  431
select_IP_local_atm: npt_found =  423
select_IP_local_atm: npt_found =  434
select_IP_local_atm: npt_found =  439
select_IP_local_atm: npt_found =  335
select_IP_local_atm: npt_found =  440
select_IP_local_atm: npt_found =  441
select_IP_local_step1 wall time:     0.435010 CPU time:    13.851640
 build_aoRg_possible wall time:     0.025709 CPU time:     0.828880
select_IP_local_step2 wall time:     0.000090 CPU time:     0.000096
select_IP_local_step3 wall time:     0.000870 CPU time:     0.000869
Memory usage for aoR  :     46.855 MB
Memory usage for aoRg :     33.868 MB
            build_IP wall time:     0.461679 CPU time:    14.681485
build_aux_basis_local wall time:     0.137231 CPU time:     4.142106
 ---------- In pyscf.isdf.isdf_local.build_V_W_local ----------
    CPU time for gen W [   1|[   0:  32]      6.23 sec, wall time      0.21 sec
    CPU time for gen W [   2|[  32:  64]      3.31 sec, wall time      0.10 sec
    CPU time for gen W [   3|[  64:  96]      1.05 sec, wall time      0.03 sec
    CPU time for gen W [   4|[  96: 128]      2.17 sec, wall time      0.07 sec
    CPU time for gen W [   5|[ 128: 160]      2.17 sec, wall time      0.07 sec
    CPU time for gen W [   6|[ 160: 192]      2.17 sec, wall time      0.07 sec
    CPU time for gen W [   7|[ 192: 224]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [   8|[ 224: 256]      2.17 sec, wall time      0.07 sec
    CPU time for gen W [   9|[ 256: 288]      2.14 sec, wall time      0.07 sec
    CPU time for gen W [  10|[ 288: 320]      2.17 sec, wall time      0.07 sec
    CPU time for gen W [  11|[ 320: 352]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  12|[ 352: 384]      2.17 sec, wall time      0.07 sec
    CPU time for gen W [  13|[ 384: 416]      2.17 sec, wall time      0.07 sec
    CPU time for gen W [  14|[ 416: 448]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  15|[ 448: 480]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  16|[ 480: 512]      2.17 sec, wall time      0.07 sec
    CPU time for gen W [  17|[ 512: 544]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  18|[ 544: 576]      2.17 sec, wall time      0.07 sec
    CPU time for gen W [  19|[ 576: 606]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  20|[   0:  32]      4.16 sec, wall time      0.16 sec
    CPU time for gen W [  21|[  32:  64]      3.51 sec, wall time      0.11 sec
    CPU time for gen W [  22|[  64:  96]      0.96 sec, wall time      0.03 sec
    CPU time for gen W [  23|[  96: 128]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  24|[ 128: 160]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  25|[ 160: 192]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  26|[ 192: 224]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  27|[ 224: 256]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  28|[ 256: 288]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  29|[ 288: 320]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  30|[ 320: 352]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  31|[ 352: 384]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  32|[ 384: 416]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  33|[ 416: 431]      1.08 sec, wall time      0.03 sec
    CPU time for gen W [  34|[   0:  32]      2.17 sec, wall time      0.07 sec
    CPU time for gen W [  35|[  32:  64]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  36|[  64:  96]      2.67 sec, wall time      0.08 sec
    CPU time for gen W [  37|[  96: 128]      1.91 sec, wall time      0.06 sec
    CPU time for gen W [  38|[ 128: 160]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  39|[ 160: 192]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  40|[ 192: 224]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  41|[ 224: 256]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  42|[ 256: 288]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  43|[ 288: 320]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  44|[ 320: 352]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  45|[ 352: 384]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  46|[ 384: 416]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  47|[ 416: 423]      0.61 sec, wall time      0.02 sec
    CPU time for gen W [  48|[   0:  32]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  49|[  32:  64]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  50|[  64:  96]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  51|[  96: 128]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  52|[ 128: 160]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  53|[ 160: 192]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  54|[ 192: 224]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  55|[ 224: 256]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  56|[ 256: 288]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  57|[ 288: 320]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  58|[ 320: 352]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  59|[ 352: 384]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  60|[ 384: 416]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  61|[ 416: 434]      1.24 sec, wall time      0.04 sec
    CPU time for gen W [  62|[   0:  32]      2.14 sec, wall time      0.07 sec
    CPU time for gen W [  63|[  32:  64]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  64|[  64:  96]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  65|[  96: 128]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  66|[ 128: 160]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  67|[ 160: 192]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  68|[ 192: 224]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  69|[ 224: 256]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  70|[ 256: 288]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  71|[ 288: 320]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  72|[ 320: 352]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  73|[ 352: 384]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  74|[ 384: 416]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  75|[ 416: 439]      1.63 sec, wall time      0.05 sec
    CPU time for gen W [  76|[   0:  32]      2.11 sec, wall time      0.07 sec
    CPU time for gen W [  77|[  32:  64]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  78|[  64:  96]      2.30 sec, wall time      0.07 sec
    CPU time for gen W [  79|[  96: 128]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  80|[ 128: 160]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  81|[ 160: 192]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  82|[ 192: 224]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  83|[ 224: 256]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  84|[ 256: 288]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  85|[ 288: 320]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  86|[ 320: 335]      1.02 sec, wall time      0.03 sec
    CPU time for gen W [  87|[   0:  32]      2.14 sec, wall time      0.07 sec
    CPU time for gen W [  88|[  32:  64]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  89|[  64:  96]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  90|[  96: 128]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  91|[ 128: 160]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  92|[ 160: 192]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  93|[ 192: 224]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  94|[ 224: 256]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  95|[ 256: 288]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  96|[ 288: 320]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  97|[ 320: 352]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  98|[ 352: 384]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  99|[ 384: 416]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [ 100|[ 416: 440]      1.66 sec, wall time      0.05 sec
    CPU time for gen W [ 101|[   0:  32]      2.08 sec, wall time      0.07 sec
    CPU time for gen W [ 102|[  32:  64]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [ 103|[  64:  96]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [ 104|[  96: 128]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [ 105|[ 128: 160]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [ 106|[ 160: 192]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [ 107|[ 192: 224]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [ 108|[ 224: 256]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [ 109|[ 256: 288]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [ 110|[ 288: 320]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [ 111|[ 320: 352]      3.00 sec, wall time      0.09 sec
    CPU time for gen W [ 112|[ 352: 384]      1.44 sec, wall time      0.05 sec
    CPU time for gen W [ 113|[ 384: 416]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [ 114|[ 416: 441]      1.72 sec, wall time      0.05 sec
     build_V_W_local wall time:     7.926378 CPU time:   251.487639
Number of interpolation points = 28392, effective CISDF =  22.75
    CPU time for ISDF build    286.38 sec, wall time      9.10 sec
/home/junjiey/anaconda3/envs/fftisdf/lib/python3.12/site-packages/pyscf/gto/mole.py:1294: UserWarning: Function mol.dumps drops attribute a because it is not JSON-serializable
  warnings.warn(msg)
/home/junjiey/anaconda3/envs/fftisdf/lib/python3.12/site-packages/pyscf/gto/mole.py:1294: UserWarning: Function mol.dumps drops attribute _mesh because it is not JSON-serializable
  warnings.warn(msg)
/home/junjiey/anaconda3/envs/fftisdf/lib/python3.12/site-packages/pyscf/gto/mole.py:1294: UserWarning: Function mol.dumps drops attribute spin because it is not JSON-serializable
  warnings.warn(msg)
finished saving to /central/scratch/yangjunjie//fftisdf-ning-20/46905124/isdf.chk
/home/junjiey/packages/pyscf-forge/pyscf-forge-yangjunjie-non-orth/pyscf/isdf/isdf_tools_Tsym.py:329: ComplexWarning: Casting complex values to real discards the imaginary part
  operator_k[loc1] = CAST_TO_COMPLEX(REAL(op_1))
