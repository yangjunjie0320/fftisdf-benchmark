OMP_NUM_THREADS = 32
MKL_NUM_THREADS = 1
PYSCF_MAX_MEMORY = 245760
TMPDIR = /central/scratch/yangjunjie//fftisdf-ning-60/46905494/
PYSCF_TMPDIR = /central/scratch/yangjunjie//fftisdf-ning-60/46905494/

/home/junjiey/anaconda3/envs/fftisdf/bin/python
2.7.0
1.14.1
1.26.4
WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

LOADING ISDF BACKEND
NUM_THREADS   : 32
USE_NUMPY     : 0
USE_SCIPY     : 1
USE_TORCH     : 0
USE_TORCH_GPU : 0
ISDF module: /home/junjiey/packages/pyscf-forge/pyscf-forge-yangjunjie-non-orth/pyscf/isdf/isdf_local_k.py
WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

c0 =  60.00
       get_partition wall time:     0.161451 CPU time:     0.866525
len of partition[   0] =    729
len of partition[   1] =    576
len of partition[   2] =    576
len of partition[   3] =    576
len of partition[   4] =    648
len of partition[   5] =    512
len of partition[   6] =    648
len of partition[   7] =    648
len of partition[   8] =    729
len of partition[   9] =    576
len of partition[  10] =    576
len of partition[  11] =    576
len of partition[  12] =    648
len of partition[  13] =    512
len of partition[  14] =    648
len of partition[  15] =    648
len of partition[  16] =    729
len of partition[  17] =    576
len of partition[  18] =    576
len of partition[  19] =    576
len of partition[  20] =    648
len of partition[  21] =    512
len of partition[  22] =    648
len of partition[  23] =    648
len of partition[  24] =    729
len of partition[  25] =    576
len of partition[  26] =    576
len of partition[  27] =    576
len of partition[  28] =    648
len of partition[  29] =    512
len of partition[  30] =    648
len of partition[  31] =    648
len of partition[  32] =    729
len of partition[  33] =    576
len of partition[  34] =    576
len of partition[  35] =    576
len of partition[  36] =    648
len of partition[  37] =    512
len of partition[  38] =    648
len of partition[  39] =    648
len of partition[  40] =    729
len of partition[  41] =    576
len of partition[  42] =    576
len of partition[  43] =    576
len of partition[  44] =    648
len of partition[  45] =    512
len of partition[  46] =    648
len of partition[  47] =    648
len of partition[  48] =    729
len of partition[  49] =    576
len of partition[  50] =    576
len of partition[  51] =    576
len of partition[  52] =    648
len of partition[  53] =    512
len of partition[  54] =    648
len of partition[  55] =    648
len of partition[  56] =    729
len of partition[  57] =    576
len of partition[  58] =    576
len of partition[  59] =    576
len of partition[  60] =    648
len of partition[  61] =    512
len of partition[  62] =    648
len of partition[  63] =    648
WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

             get_aoR wall time:     0.282382 CPU time:     8.241025
In _build_buffer: ISDF Local size of buffer = 199.291 MB
 ---------- In pyscf.isdf.isdf_local.select_IP_local_atm ----------
select_IP_local_atm: atm_begin =    0, atm_end =    8
select_IP_local_atm: npt_found =  640
select_IP_local_atm: npt_found =  457
select_IP_local_atm: npt_found =  457
select_IP_local_atm: npt_found =  452
select_IP_local_atm: npt_found =  574
select_IP_local_atm: npt_found =  381
select_IP_local_atm: npt_found =  576
select_IP_local_atm: npt_found =  578
select_IP_local_step1 wall time:     0.786218 CPU time:    24.681228
 build_aoRg_possible wall time:     0.041309 CPU time:     1.339737
select_IP_local_step2 wall time:     0.000166 CPU time:     0.000177
select_IP_local_step3 wall time:     0.001303 CPU time:     0.032191
Memory usage for aoR  :     46.855 MB
Memory usage for aoRg :     39.257 MB
            build_IP wall time:     0.828996 CPU time:    26.053334
build_aux_basis_local wall time:     0.200743 CPU time:     5.632657
 ---------- In pyscf.isdf.isdf_local.build_V_W_local ----------
    CPU time for gen W [   1|[   0:  32]      8.23 sec, wall time      0.27 sec
    CPU time for gen W [   2|[  32:  64]      4.80 sec, wall time      0.16 sec
    CPU time for gen W [   3|[  64:  96]      2.68 sec, wall time      0.08 sec
    CPU time for gen W [   4|[  96: 128]      2.74 sec, wall time      0.09 sec
    CPU time for gen W [   5|[ 128: 160]      2.71 sec, wall time      0.09 sec
    CPU time for gen W [   6|[ 160: 192]      2.74 sec, wall time      0.09 sec
    CPU time for gen W [   7|[ 192: 224]      2.71 sec, wall time      0.09 sec
    CPU time for gen W [   8|[ 224: 256]      2.71 sec, wall time      0.09 sec
    CPU time for gen W [   9|[ 256: 288]      2.74 sec, wall time      0.09 sec
    CPU time for gen W [  10|[ 288: 320]      2.71 sec, wall time      0.09 sec
    CPU time for gen W [  11|[ 320: 352]      2.71 sec, wall time      0.09 sec
    CPU time for gen W [  12|[ 352: 384]      2.74 sec, wall time      0.09 sec
    CPU time for gen W [  13|[ 384: 416]      2.74 sec, wall time      0.09 sec
    CPU time for gen W [  14|[ 416: 448]      2.71 sec, wall time      0.09 sec
    CPU time for gen W [  15|[ 448: 480]      2.74 sec, wall time      0.09 sec
    CPU time for gen W [  16|[ 480: 512]      2.71 sec, wall time      0.09 sec
    CPU time for gen W [  17|[ 512: 544]      2.71 sec, wall time      0.09 sec
    CPU time for gen W [  18|[ 544: 576]      2.74 sec, wall time      0.09 sec
    CPU time for gen W [  19|[ 576: 608]      2.68 sec, wall time      0.08 sec
    CPU time for gen W [  20|[ 608: 640]      2.74 sec, wall time      0.09 sec
    CPU time for gen W [  21|[   0:  32]     14.73 sec, wall time      0.54 sec
    CPU time for gen W [  22|[  32:  64]      4.50 sec, wall time      0.14 sec
    CPU time for gen W [  23|[  64:  96]      0.73 sec, wall time      0.02 sec
    CPU time for gen W [  24|[  96: 128]      2.65 sec, wall time      0.08 sec
    CPU time for gen W [  25|[ 128: 160]      2.65 sec, wall time      0.08 sec
    CPU time for gen W [  26|[ 160: 192]      2.71 sec, wall time      0.08 sec
    CPU time for gen W [  27|[ 192: 224]      2.68 sec, wall time      0.08 sec
    CPU time for gen W [  28|[ 224: 256]      2.65 sec, wall time      0.08 sec
    CPU time for gen W [  29|[ 256: 288]      2.65 sec, wall time      0.08 sec
    CPU time for gen W [  30|[ 288: 320]      2.65 sec, wall time      0.08 sec
    CPU time for gen W [  31|[ 320: 352]      2.65 sec, wall time      0.08 sec
    CPU time for gen W [  32|[ 352: 384]      2.65 sec, wall time      0.08 sec
    CPU time for gen W [  33|[ 384: 416]      2.71 sec, wall time      0.08 sec
    CPU time for gen W [  34|[ 416: 448]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  35|[ 448: 457]      0.67 sec, wall time      0.02 sec
    CPU time for gen W [  36|[   0:  32]     30.22 sec, wall time      0.99 sec
    CPU time for gen W [  37|[  32:  64]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  38|[  64:  96]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  39|[  96: 128]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  40|[ 128: 160]      2.61 sec, wall time      0.08 sec
    CPU time for gen W [  41|[ 160: 192]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  42|[ 192: 224]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  43|[ 224: 256]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  44|[ 256: 288]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  45|[ 288: 320]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  46|[ 320: 352]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  47|[ 352: 384]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  48|[ 384: 416]      2.66 sec, wall time      0.08 sec
    CPU time for gen W [  49|[ 416: 448]      2.43 sec, wall time      0.08 sec
    CPU time for gen W [  50|[ 448: 457]      0.35 sec, wall time      0.01 sec
    CPU time for gen W [  51|[   0:  32]      2.48 sec, wall time      0.08 sec
    CPU time for gen W [  52|[  32:  64]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  53|[  64:  96]      2.30 sec, wall time      0.07 sec
    CPU time for gen W [  54|[  96: 128]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  55|[ 128: 160]      2.30 sec, wall time      0.07 sec
    CPU time for gen W [  56|[ 160: 192]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  57|[ 192: 224]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  58|[ 224: 256]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  59|[ 256: 288]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  60|[ 288: 320]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  61|[ 320: 352]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  62|[ 352: 384]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  63|[ 384: 416]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  64|[ 416: 448]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  65|[ 448: 452]      0.48 sec, wall time      0.02 sec
    CPU time for gen W [  66|[   0:  32]      2.78 sec, wall time      0.09 sec
    CPU time for gen W [  67|[  32:  64]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  68|[  64:  96]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  69|[  96: 128]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  70|[ 128: 160]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  71|[ 160: 192]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  72|[ 192: 224]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  73|[ 224: 256]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  74|[ 256: 288]      2.30 sec, wall time      0.07 sec
    CPU time for gen W [  75|[ 288: 320]      2.30 sec, wall time      0.07 sec
    CPU time for gen W [  76|[ 320: 352]      2.33 sec, wall time      0.07 sec
    CPU time for gen W [  77|[ 352: 384]      2.14 sec, wall time      0.07 sec
    CPU time for gen W [  78|[ 384: 416]      2.30 sec, wall time      0.07 sec
    CPU time for gen W [  79|[ 416: 448]      2.14 sec, wall time      0.07 sec
    CPU time for gen W [  80|[ 448: 480]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  81|[ 480: 512]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [  82|[ 512: 544]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [  83|[ 544: 574]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  84|[   0:  32]      2.33 sec, wall time      0.07 sec
    CPU time for gen W [  85|[  32:  64]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  86|[  64:  96]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  87|[  96: 128]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  88|[ 128: 160]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  89|[ 160: 192]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  90|[ 192: 224]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  91|[ 224: 256]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [  92|[ 256: 288]      2.36 sec, wall time      0.07 sec
    CPU time for gen W [  93|[ 288: 320]      2.17 sec, wall time      0.07 sec
    CPU time for gen W [  94|[ 320: 352]      2.36 sec, wall time      0.07 sec
    CPU time for gen W [  95|[ 352: 381]      1.91 sec, wall time      0.06 sec
    CPU time for gen W [  96|[   0:  32]      3.00 sec, wall time      0.09 sec
    CPU time for gen W [  97|[  32:  64]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [  98|[  64:  96]      2.30 sec, wall time      0.07 sec
    CPU time for gen W [  99|[  96: 128]      2.36 sec, wall time      0.07 sec
    CPU time for gen W [ 100|[ 128: 160]      2.17 sec, wall time      0.07 sec
    CPU time for gen W [ 101|[ 160: 192]      2.36 sec, wall time      0.07 sec
    CPU time for gen W [ 102|[ 192: 224]      2.17 sec, wall time      0.07 sec
    CPU time for gen W [ 103|[ 224: 256]      2.30 sec, wall time      0.07 sec
    CPU time for gen W [ 104|[ 256: 288]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [ 105|[ 288: 320]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [ 106|[ 320: 352]      2.64 sec, wall time      0.08 sec
    CPU time for gen W [ 107|[ 352: 384]      2.30 sec, wall time      0.07 sec
    CPU time for gen W [ 108|[ 384: 416]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [ 109|[ 416: 448]      2.30 sec, wall time      0.07 sec
    CPU time for gen W [ 110|[ 448: 480]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [ 111|[ 480: 512]      2.30 sec, wall time      0.07 sec
    CPU time for gen W [ 112|[ 512: 544]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [ 113|[ 544: 576]      2.33 sec, wall time      0.07 sec
    CPU time for gen W [ 114|[   0:  32]      2.67 sec, wall time      0.08 sec
    CPU time for gen W [ 115|[  32:  64]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [ 116|[  64:  96]      2.20 sec, wall time      0.07 sec
    CPU time for gen W [ 117|[  96: 128]      2.27 sec, wall time      0.07 sec
    CPU time for gen W [ 118|[ 128: 160]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [ 119|[ 160: 192]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [ 120|[ 192: 224]      2.60 sec, wall time      0.08 sec
    CPU time for gen W [ 121|[ 224: 256]      2.32 sec, wall time      0.07 sec
    CPU time for gen W [ 122|[ 256: 288]      2.22 sec, wall time      0.07 sec
    CPU time for gen W [ 123|[ 288: 320]      2.29 sec, wall time      0.07 sec
    CPU time for gen W [ 124|[ 320: 352]      2.23 sec, wall time      0.07 sec
    CPU time for gen W [ 125|[ 352: 384]      2.35 sec, wall time      0.07 sec
    CPU time for gen W [ 126|[ 384: 416]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [ 127|[ 416: 448]      2.36 sec, wall time      0.07 sec
    CPU time for gen W [ 128|[ 448: 480]      2.33 sec, wall time      0.07 sec
    CPU time for gen W [ 129|[ 480: 512]      2.29 sec, wall time      0.07 sec
    CPU time for gen W [ 130|[ 512: 544]      2.30 sec, wall time      0.07 sec
    CPU time for gen W [ 131|[ 544: 576]      2.30 sec, wall time      0.07 sec
    CPU time for gen W [ 132|[ 576: 578]      0.38 sec, wall time      0.01 sec
     build_V_W_local wall time:    11.315243 CPU time:   356.598204
Number of interpolation points = 32920, effective CISDF =  26.38
    CPU time for ISDF build    405.77 sec, wall time     13.10 sec
/home/junjiey/anaconda3/envs/fftisdf/lib/python3.12/site-packages/pyscf/gto/mole.py:1294: UserWarning: Function mol.dumps drops attribute a because it is not JSON-serializable
  warnings.warn(msg)
/home/junjiey/anaconda3/envs/fftisdf/lib/python3.12/site-packages/pyscf/gto/mole.py:1294: UserWarning: Function mol.dumps drops attribute _mesh because it is not JSON-serializable
  warnings.warn(msg)
/home/junjiey/anaconda3/envs/fftisdf/lib/python3.12/site-packages/pyscf/gto/mole.py:1294: UserWarning: Function mol.dumps drops attribute spin because it is not JSON-serializable
  warnings.warn(msg)
finished saving to /central/scratch/yangjunjie//fftisdf-ning-60/46905494/isdf.chk
/home/junjiey/packages/pyscf-forge/pyscf-forge-yangjunjie-non-orth/pyscf/isdf/isdf_tools_Tsym.py:329: ComplexWarning: Casting complex values to real discards the imaginary part
  operator_k[loc1] = CAST_TO_COMPLEX(REAL(op_1))
