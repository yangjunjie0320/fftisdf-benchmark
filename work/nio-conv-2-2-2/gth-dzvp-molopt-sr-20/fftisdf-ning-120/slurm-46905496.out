OMP_NUM_THREADS = 32
MKL_NUM_THREADS = 1
PYSCF_MAX_MEMORY = 245760
TMPDIR = /central/scratch/yangjunjie//fftisdf-ning-120/46905496/
PYSCF_TMPDIR = /central/scratch/yangjunjie//fftisdf-ning-120/46905496/

/home/junjiey/anaconda3/envs/fftisdf/bin/python
2.7.0
1.14.1
1.26.4
WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

LOADING ISDF BACKEND
NUM_THREADS   : 32
USE_NUMPY     : 0
USE_SCIPY     : 1
USE_TORCH     : 0
USE_TORCH_GPU : 0
ISDF module: /home/junjiey/packages/pyscf-forge/pyscf-forge-yangjunjie-non-orth/pyscf/isdf/isdf_local_k.py
WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

c0 = 120.00
       get_partition wall time:     0.173162 CPU time:     1.415879
len of partition[   0] =    729
len of partition[   1] =    576
len of partition[   2] =    576
len of partition[   3] =    576
len of partition[   4] =    648
len of partition[   5] =    512
len of partition[   6] =    648
len of partition[   7] =    648
len of partition[   8] =    729
len of partition[   9] =    576
len of partition[  10] =    576
len of partition[  11] =    576
len of partition[  12] =    648
len of partition[  13] =    512
len of partition[  14] =    648
len of partition[  15] =    648
len of partition[  16] =    729
len of partition[  17] =    576
len of partition[  18] =    576
len of partition[  19] =    576
len of partition[  20] =    648
len of partition[  21] =    512
len of partition[  22] =    648
len of partition[  23] =    648
len of partition[  24] =    729
len of partition[  25] =    576
len of partition[  26] =    576
len of partition[  27] =    576
len of partition[  28] =    648
len of partition[  29] =    512
len of partition[  30] =    648
len of partition[  31] =    648
len of partition[  32] =    729
len of partition[  33] =    576
len of partition[  34] =    576
len of partition[  35] =    576
len of partition[  36] =    648
len of partition[  37] =    512
len of partition[  38] =    648
len of partition[  39] =    648
len of partition[  40] =    729
len of partition[  41] =    576
len of partition[  42] =    576
len of partition[  43] =    576
len of partition[  44] =    648
len of partition[  45] =    512
len of partition[  46] =    648
len of partition[  47] =    648
len of partition[  48] =    729
len of partition[  49] =    576
len of partition[  50] =    576
len of partition[  51] =    576
len of partition[  52] =    648
len of partition[  53] =    512
len of partition[  54] =    648
len of partition[  55] =    648
len of partition[  56] =    729
len of partition[  57] =    576
len of partition[  58] =    576
len of partition[  59] =    576
len of partition[  60] =    648
len of partition[  61] =    512
len of partition[  62] =    648
len of partition[  63] =    648
WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

             get_aoR wall time:     0.293332 CPU time:     8.521115
In _build_buffer: ISDF Local size of buffer = 313.783 MB
 ---------- In pyscf.isdf.isdf_local.select_IP_local_atm ----------
select_IP_local_atm: atm_begin =    0, atm_end =    8
select_IP_local_atm: npt_found =  658
select_IP_local_atm: npt_found =  457
select_IP_local_atm: npt_found =  459
select_IP_local_atm: npt_found =  465
select_IP_local_atm: npt_found =  587
select_IP_local_atm: npt_found =  390
select_IP_local_atm: npt_found =  588
select_IP_local_atm: npt_found =  585
select_IP_local_step1 wall time:     0.879253 CPU time:    27.619711
 build_aoRg_possible wall time:     0.036100 CPU time:     1.090253
select_IP_local_step2 wall time:     0.043007 CPU time:     1.330819
select_IP_local_step3 wall time:     0.002505 CPU time:     0.093873
Memory usage for aoR  :     46.855 MB
Memory usage for aoRg :     39.962 MB
            build_IP wall time:     0.960864 CPU time:    30.134655
build_aux_basis_local wall time:     0.203526 CPU time:     5.593927
 ---------- In pyscf.isdf.isdf_local.build_V_W_local ----------
    CPU time for gen W [   1|[   0:  32]      7.80 sec, wall time      0.25 sec
    CPU time for gen W [   2|[  32:  64]      1.34 sec, wall time      0.04 sec
    CPU time for gen W [   3|[  64:  96]      2.52 sec, wall time      0.08 sec
    CPU time for gen W [   4|[  96: 128]      2.52 sec, wall time      0.08 sec
    CPU time for gen W [   5|[ 128: 160]      2.55 sec, wall time      0.08 sec
    CPU time for gen W [   6|[ 160: 192]      2.52 sec, wall time      0.08 sec
    CPU time for gen W [   7|[ 192: 224]      2.52 sec, wall time      0.08 sec
    CPU time for gen W [   8|[ 224: 256]      2.55 sec, wall time      0.08 sec
    CPU time for gen W [   9|[ 256: 288]      2.52 sec, wall time      0.08 sec
    CPU time for gen W [  10|[ 288: 320]      2.52 sec, wall time      0.08 sec
    CPU time for gen W [  11|[ 320: 352]      2.93 sec, wall time      0.09 sec
    CPU time for gen W [  12|[ 352: 384]      2.61 sec, wall time      0.08 sec
    CPU time for gen W [  13|[ 384: 416]      2.52 sec, wall time      0.08 sec
    CPU time for gen W [  14|[ 416: 448]      2.52 sec, wall time      0.08 sec
    CPU time for gen W [  15|[ 448: 480]      2.52 sec, wall time      0.08 sec
    CPU time for gen W [  16|[ 480: 512]      2.55 sec, wall time      0.08 sec
    CPU time for gen W [  17|[ 512: 544]      2.49 sec, wall time      0.08 sec
    CPU time for gen W [  18|[ 544: 576]      2.46 sec, wall time      0.08 sec
    CPU time for gen W [  19|[ 576: 608]      2.49 sec, wall time      0.08 sec
    CPU time for gen W [  20|[ 608: 640]      2.46 sec, wall time      0.08 sec
    CPU time for gen W [  21|[ 640: 658]      1.33 sec, wall time      0.04 sec
    CPU time for gen W [  22|[   0:  32]      4.22 sec, wall time      0.15 sec
    CPU time for gen W [  23|[  32:  64]      3.21 sec, wall time      0.10 sec
    CPU time for gen W [  24|[  64:  96]      0.83 sec, wall time      0.03 sec
    CPU time for gen W [  25|[  96: 128]      2.10 sec, wall time      0.07 sec
    CPU time for gen W [  26|[ 128: 160]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  27|[ 160: 192]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  28|[ 192: 224]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  29|[ 224: 256]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  30|[ 256: 288]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  31|[ 288: 320]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  32|[ 320: 352]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  33|[ 352: 384]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  34|[ 384: 416]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  35|[ 416: 448]      2.10 sec, wall time      0.07 sec
    CPU time for gen W [  36|[ 448: 457]      0.67 sec, wall time      0.02 sec
    CPU time for gen W [  37|[   0:  32]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  38|[  32:  64]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  39|[  64:  96]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  40|[  96: 128]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  41|[ 128: 160]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  42|[ 160: 192]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  43|[ 192: 224]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  44|[ 224: 256]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  45|[ 256: 288]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  46|[ 288: 320]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  47|[ 320: 352]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  48|[ 352: 384]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  49|[ 384: 416]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  50|[ 416: 448]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  51|[ 448: 459]      0.77 sec, wall time      0.02 sec
    CPU time for gen W [  52|[   0:  32]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  53|[  32:  64]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  54|[  64:  96]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  55|[  96: 128]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  56|[ 128: 160]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  57|[ 160: 192]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  58|[ 192: 224]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  59|[ 224: 256]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  60|[ 256: 288]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  61|[ 288: 320]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  62|[ 320: 352]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  63|[ 352: 384]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  64|[ 384: 416]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  65|[ 416: 448]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  66|[ 448: 465]      1.18 sec, wall time      0.04 sec
    CPU time for gen W [  67|[   0:  32]      2.05 sec, wall time      0.07 sec
    CPU time for gen W [  68|[  32:  64]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  69|[  64:  96]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  70|[  96: 128]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  71|[ 128: 160]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  72|[ 160: 192]      1.98 sec, wall time      0.06 sec
    CPU time for gen W [  73|[ 192: 224]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  74|[ 224: 256]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  75|[ 256: 288]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  76|[ 288: 320]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  77|[ 320: 352]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  78|[ 352: 384]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  79|[ 384: 416]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  80|[ 416: 448]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  81|[ 448: 480]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  82|[ 480: 512]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  83|[ 512: 544]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  84|[ 544: 576]      2.07 sec, wall time      0.06 sec
    CPU time for gen W [  85|[ 576: 587]      0.77 sec, wall time      0.02 sec
    CPU time for gen W [  86|[   0:  32]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  87|[  32:  64]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  88|[  64:  96]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  89|[  96: 128]      1.98 sec, wall time      0.06 sec
    CPU time for gen W [  90|[ 128: 160]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  91|[ 160: 192]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  92|[ 192: 224]      1.98 sec, wall time      0.06 sec
    CPU time for gen W [  93|[ 224: 256]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  94|[ 256: 288]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [  95|[ 288: 320]      1.98 sec, wall time      0.06 sec
    CPU time for gen W [  96|[ 320: 352]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  97|[ 352: 384]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [  98|[ 384: 390]      0.54 sec, wall time      0.02 sec
    CPU time for gen W [  99|[   0:  32]      2.07 sec, wall time      0.07 sec
    CPU time for gen W [ 100|[  32:  64]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 101|[  64:  96]      2.07 sec, wall time      0.07 sec
    CPU time for gen W [ 102|[  96: 128]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 103|[ 128: 160]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 104|[ 160: 192]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 105|[ 192: 224]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 106|[ 224: 256]      1.98 sec, wall time      0.06 sec
    CPU time for gen W [ 107|[ 256: 288]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 108|[ 288: 320]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 109|[ 320: 352]      1.98 sec, wall time      0.06 sec
    CPU time for gen W [ 110|[ 352: 384]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 111|[ 384: 416]      2.26 sec, wall time      0.07 sec
    CPU time for gen W [ 112|[ 416: 448]      2.10 sec, wall time      0.07 sec
    CPU time for gen W [ 113|[ 448: 480]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 114|[ 480: 512]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 115|[ 512: 544]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [ 116|[ 544: 576]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [ 117|[ 576: 588]      0.86 sec, wall time      0.03 sec
    CPU time for gen W [ 118|[   0:  32]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 119|[  32:  64]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 120|[  64:  96]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 121|[  96: 128]      1.98 sec, wall time      0.06 sec
    CPU time for gen W [ 122|[ 128: 160]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 123|[ 160: 192]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 124|[ 192: 224]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 125|[ 224: 256]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 126|[ 256: 288]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 127|[ 288: 320]      1.98 sec, wall time      0.06 sec
    CPU time for gen W [ 128|[ 320: 352]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 129|[ 352: 384]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 130|[ 384: 416]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 131|[ 416: 448]      2.04 sec, wall time      0.06 sec
    CPU time for gen W [ 132|[ 448: 480]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 133|[ 480: 512]      2.07 sec, wall time      0.07 sec
    CPU time for gen W [ 134|[ 512: 544]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 135|[ 544: 576]      2.01 sec, wall time      0.06 sec
    CPU time for gen W [ 136|[ 576: 585]      0.67 sec, wall time      0.02 sec
     build_V_W_local wall time:     8.872776 CPU time:   282.215464
Number of interpolation points = 33512, effective CISDF =  26.85
    CPU time for ISDF build    334.29 sec, wall time     10.82 sec
/home/junjiey/anaconda3/envs/fftisdf/lib/python3.12/site-packages/pyscf/gto/mole.py:1294: UserWarning: Function mol.dumps drops attribute a because it is not JSON-serializable
  warnings.warn(msg)
/home/junjiey/anaconda3/envs/fftisdf/lib/python3.12/site-packages/pyscf/gto/mole.py:1294: UserWarning: Function mol.dumps drops attribute _mesh because it is not JSON-serializable
  warnings.warn(msg)
/home/junjiey/anaconda3/envs/fftisdf/lib/python3.12/site-packages/pyscf/gto/mole.py:1294: UserWarning: Function mol.dumps drops attribute spin because it is not JSON-serializable
  warnings.warn(msg)
finished saving to /central/scratch/yangjunjie//fftisdf-ning-120/46905496/isdf.chk
/home/junjiey/packages/pyscf-forge/pyscf-forge-yangjunjie-non-orth/pyscf/isdf/isdf_tools_Tsym.py:329: ComplexWarning: Casting complex values to real discards the imaginary part
  operator_k[loc1] = CAST_TO_COMPLEX(REAL(op_1))
