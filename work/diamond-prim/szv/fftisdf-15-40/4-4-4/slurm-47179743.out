OMP_NUM_THREADS = 64
MKL_NUM_THREADS = 1
PYSCF_MAX_MEMORY = 491520
TMPDIR = /central/scratch/yangjunjie//work/diamond-prim/szv/fftisdf-15-40/4-4-4//47179743/
PYSCF_TMPDIR = /central/scratch/yangjunjie//work/diamond-prim/szv/fftisdf-15-40/4-4-4//47179743/
rm: invalid option -- 'p'
Try 'rm --help' for more information.

/home/junjiey/anaconda3/envs/fftisdf/bin/python
2.8.0
1.13.1
1.26.4


******** <class 'fft_isdf.InterpolativeSeparableDensityFitting'> ********
mesh = [15 15 15] (3375 PWs)
len(kpts) = 64
    kpts = [[ 0.00000000e+00  0.00000000e+00  0.00000000e+00]
 [-1.90605072e-01 -1.34778159e-01  3.30137712e-01]
 [-3.81210144e-01 -2.69556319e-01  6.60275424e-01]
 [-5.71815216e-01 -4.04334478e-01  9.90413137e-01]
 [ 0.00000000e+00  4.04334478e-01  0.00000000e+00]
 [-1.90605072e-01  2.69556319e-01  3.30137712e-01]
 [-3.81210144e-01  1.34778159e-01  6.60275424e-01]
 [-5.71815216e-01 -2.77555756e-17  9.90413137e-01]
 [ 0.00000000e+00  8.08668956e-01  0.00000000e+00]
 [-1.90605072e-01  6.73890797e-01  3.30137712e-01]
 [-3.81210144e-01  5.39112637e-01  6.60275424e-01]
 [-5.71815216e-01  4.04334478e-01  9.90413137e-01]
 [ 0.00000000e+00  1.21300343e+00  0.00000000e+00]
 [-1.90605072e-01  1.07822527e+00  3.30137712e-01]
 [-3.81210144e-01  9.43447115e-01  6.60275424e-01]
 [-5.71815216e-01  8.08668956e-01  9.90413137e-01]
 [ 3.81210144e-01 -1.34778159e-01  0.00000000e+00]
 [ 1.90605072e-01 -2.69556319e-01  3.30137712e-01]
 [ 5.55111512e-17 -4.04334478e-01  6.60275424e-01]
 [-1.90605072e-01 -5.39112637e-01  9.90413137e-01]
 [ 3.81210144e-01  2.69556319e-01  0.00000000e+00]
 [ 1.90605072e-01  1.34778159e-01  3.30137712e-01]
 [ 5.55111512e-17  0.00000000e+00  6.60275424e-01]
 [-1.90605072e-01 -1.34778159e-01  9.90413137e-01]
 [ 3.81210144e-01  6.73890797e-01  0.00000000e+00]
 [ 1.90605072e-01  5.39112637e-01  3.30137712e-01]
 [ 5.55111512e-17  4.04334478e-01  6.60275424e-01]
 [-1.90605072e-01  2.69556319e-01  9.90413137e-01]
 [ 3.81210144e-01  1.07822527e+00  0.00000000e+00]
 [ 1.90605072e-01  9.43447115e-01  3.30137712e-01]
 [ 5.55111512e-17  8.08668956e-01  6.60275424e-01]
 [-1.90605072e-01  6.73890797e-01  9.90413137e-01]
 [ 7.62420288e-01 -2.69556319e-01  0.00000000e+00]
 [ 5.71815216e-01 -4.04334478e-01  3.30137712e-01]
 [ 3.81210144e-01 -5.39112637e-01  6.60275424e-01]
 [ 1.90605072e-01 -6.73890797e-01  9.90413137e-01]
 [ 7.62420288e-01  1.34778159e-01  0.00000000e+00]
 [ 5.71815216e-01  2.77555756e-17  3.30137712e-01]
 [ 3.81210144e-01 -1.34778159e-01  6.60275424e-01]
 [ 1.90605072e-01 -2.69556319e-01  9.90413137e-01]
 [ 7.62420288e-01  5.39112637e-01  0.00000000e+00]
 [ 5.71815216e-01  4.04334478e-01  3.30137712e-01]
 [ 3.81210144e-01  2.69556319e-01  6.60275424e-01]
 [ 1.90605072e-01  1.34778159e-01  9.90413137e-01]
 [ 7.62420288e-01  9.43447115e-01  0.00000000e+00]
 [ 5.71815216e-01  8.08668956e-01  3.30137712e-01]
 [ 3.81210144e-01  6.73890797e-01  6.60275424e-01]
 [ 1.90605072e-01  5.39112637e-01  9.90413137e-01]
 [ 1.14363043e+00 -4.04334478e-01  0.00000000e+00]
 [ 9.53025361e-01 -5.39112637e-01  3.30137712e-01]
 [ 7.62420288e-01 -6.73890797e-01  6.60275424e-01]
 [ 5.71815216e-01 -8.08668956e-01  9.90413137e-01]
 [ 1.14363043e+00  5.55111512e-17  0.00000000e+00]
 [ 9.53025361e-01 -1.34778159e-01  3.30137712e-01]
 [ 7.62420288e-01 -2.69556319e-01  6.60275424e-01]
 [ 5.71815216e-01 -4.04334478e-01  9.90413137e-01]
 [ 1.14363043e+00  4.04334478e-01  0.00000000e+00]
 [ 9.53025361e-01  2.69556319e-01  3.30137712e-01]
 [ 7.62420288e-01  1.34778159e-01  6.60275424e-01]
 [ 5.71815216e-01  2.77555756e-17  9.90413137e-01]
 [ 1.14363043e+00  8.08668956e-01  0.00000000e+00]
 [ 9.53025361e-01  6.73890797e-01  3.30137712e-01]
 [ 7.62420288e-01  5.39112637e-01  6.60275424e-01]
 [ 5.71815216e-01  4.04334478e-01  9.90413137e-01]]
Overwritten attributes  kmesh tol c0  of <class 'fft_isdf.InterpolativeSeparableDensityFitting'>

WARN: ke_cutoff/mesh (40 / [15 15 15]) is not enough for FFTDF to get integral accuracy 1e-10.
Coulomb integral error is ~ 8.8 Eh.
Recommended ke_cutoff/mesh are 635.334 / [55 55 55].

kmesh = [4 4 4]
Input parent grid mesh = [5, 5, 5], ke_cutoff =  12.45
Final parent grid size = [7 5 7]

Selecting interpolation points
nkpts = 64, nao = 8, c0 =  15.00
Parent grid mesh = [7 5 7], grid size = 245

WARN: The parent grid might be too coarse.

    CPU time for select interpolation points    147.77 sec, wall time      2.34 sec
Pivoted Cholesky rank = 245, nip = 120, estimated error = 2.88e-02
Number of interpolation points = 120, effective CISDF =  15.00
    CPU time for building left-hand side      2.37 sec, wall time      0.04 sec

kpt = 64, ngrid = 3375, nao = 8
ngrid = 3375, blksize = 399802, nip = 120
required disk space = 0 GB
finished creating fswp: /central/scratch/yangjunjie/work/diamond-prim/szv/fftisdf-15-40/4-4-4/47179743/mrhl4m6j
blksize = 399802, memory for aoR_loop = 49127 MB
finished aoR_loop[       0:    3375]
    CPU time for building right-hand side     65.09 sec, wall time      1.12 sec
w[  0], rank =   79 /  120
    CPU time for w[  0]      3.75 sec, wall time      0.06 sec
w[  1], rank =   79 /  120
    CPU time for w[  1]      2.19 sec, wall time      0.04 sec
w[  2], rank =   79 /  120
    CPU time for w[  2]      2.09 sec, wall time      0.03 sec
w[  3], rank =   79 /  120
    CPU time for w[  3]      1.93 sec, wall time      0.03 sec
w[  4], rank =   79 /  120
    CPU time for w[  4]      1.91 sec, wall time      0.03 sec
w[  5], rank =   79 /  120
    CPU time for w[  5]      1.89 sec, wall time      0.03 sec
w[  6], rank =   79 /  120
    CPU time for w[  6]      1.90 sec, wall time      0.03 sec
w[  7], rank =   79 /  120
    CPU time for w[  7]      1.91 sec, wall time      0.03 sec
w[  8], rank =   79 /  120
    CPU time for w[  8]      1.91 sec, wall time      0.03 sec
w[  9], rank =   79 /  120
    CPU time for w[  9]      1.91 sec, wall time      0.03 sec
w[ 10], rank =   79 /  120
    CPU time for w[ 10]      2.05 sec, wall time      0.03 sec
w[ 11], rank =   79 /  120
    CPU time for w[ 11]      1.99 sec, wall time      0.03 sec
w[ 12], rank =   79 /  120
    CPU time for w[ 12]      1.89 sec, wall time      0.03 sec
w[ 13], rank =   79 /  120
    CPU time for w[ 13]      1.98 sec, wall time      0.03 sec
w[ 14], rank =   79 /  120
    CPU time for w[ 14]      1.95 sec, wall time      0.03 sec
w[ 15], rank =   79 /  120
    CPU time for w[ 15]      1.91 sec, wall time      0.03 sec
w[ 16], rank =   79 /  120
    CPU time for w[ 16]      1.90 sec, wall time      0.03 sec
w[ 17], rank =   79 /  120
    CPU time for w[ 17]      1.88 sec, wall time      0.03 sec
w[ 18], rank =   79 /  120
    CPU time for w[ 18]      1.90 sec, wall time      0.03 sec
w[ 19], rank =   79 /  120
    CPU time for w[ 19]      1.88 sec, wall time      0.03 sec
w[ 20], rank =   79 /  120
    CPU time for w[ 20]      1.91 sec, wall time      0.03 sec
w[ 21], rank =   79 /  120
    CPU time for w[ 21]      1.88 sec, wall time      0.03 sec
w[ 22], rank =   79 /  120
    CPU time for w[ 22]      1.91 sec, wall time      0.03 sec
w[ 23], rank =   79 /  120
    CPU time for w[ 23]      1.88 sec, wall time      0.03 sec
w[ 24], rank =   79 /  120
    CPU time for w[ 24]      1.91 sec, wall time      0.03 sec
w[ 25], rank =   79 /  120
    CPU time for w[ 25]      1.87 sec, wall time      0.03 sec
w[ 26], rank =   79 /  120
    CPU time for w[ 26]      1.87 sec, wall time      0.03 sec
w[ 27], rank =   79 /  120
    CPU time for w[ 27]      1.85 sec, wall time      0.03 sec
w[ 28], rank =   79 /  120
    CPU time for w[ 28]      1.89 sec, wall time      0.03 sec
w[ 29], rank =   79 /  120
    CPU time for w[ 29]      1.86 sec, wall time      0.03 sec
w[ 30], rank =   79 /  120
    CPU time for w[ 30]      1.88 sec, wall time      0.03 sec
w[ 31], rank =   79 /  120
    CPU time for w[ 31]      1.86 sec, wall time      0.03 sec
w[ 32], rank =   79 /  120
    CPU time for w[ 32]      1.89 sec, wall time      0.03 sec
w[ 33], rank =   79 /  120
    CPU time for w[ 33]      1.88 sec, wall time      0.03 sec
w[ 34], rank =   79 /  120
    CPU time for w[ 34]      1.87 sec, wall time      0.03 sec
w[ 35], rank =   79 /  120
    CPU time for w[ 35]      1.87 sec, wall time      0.03 sec
w[ 36], rank =   79 /  120
    CPU time for w[ 36]      1.88 sec, wall time      0.03 sec
w[ 37], rank =   79 /  120
    CPU time for w[ 37]      1.87 sec, wall time      0.03 sec
w[ 38], rank =   79 /  120
    CPU time for w[ 38]      2.21 sec, wall time      0.03 sec
w[ 39], rank =   79 /  120
    CPU time for w[ 39]      1.94 sec, wall time      0.03 sec
w[ 40], rank =   79 /  120
    CPU time for w[ 40]      1.95 sec, wall time      0.03 sec
w[ 41], rank =   79 /  120
    CPU time for w[ 41]      1.86 sec, wall time      0.03 sec
w[ 42], rank =   79 /  120
    CPU time for w[ 42]      1.99 sec, wall time      0.03 sec
w[ 43], rank =   79 /  120
    CPU time for w[ 43]      1.92 sec, wall time      0.03 sec
w[ 44], rank =   79 /  120
    CPU time for w[ 44]      1.95 sec, wall time      0.03 sec
w[ 45], rank =   79 /  120
    CPU time for w[ 45]      1.89 sec, wall time      0.03 sec
w[ 46], rank =   79 /  120
    CPU time for w[ 46]      1.98 sec, wall time      0.03 sec
w[ 47], rank =   79 /  120
    CPU time for w[ 47]      1.95 sec, wall time      0.03 sec
w[ 48], rank =   79 /  120
    CPU time for w[ 48]      1.95 sec, wall time      0.03 sec
w[ 49], rank =   79 /  120
    CPU time for w[ 49]      1.88 sec, wall time      0.03 sec
w[ 50], rank =   79 /  120
    CPU time for w[ 50]      1.97 sec, wall time      0.03 sec
w[ 51], rank =   79 /  120
    CPU time for w[ 51]      1.91 sec, wall time      0.03 sec
w[ 52], rank =   79 /  120
    CPU time for w[ 52]      1.97 sec, wall time      0.03 sec
w[ 53], rank =   79 /  120
    CPU time for w[ 53]      1.87 sec, wall time      0.03 sec
w[ 54], rank =   79 /  120
    CPU time for w[ 54]      2.00 sec, wall time      0.03 sec
w[ 55], rank =   79 /  120
    CPU time for w[ 55]      1.92 sec, wall time      0.03 sec
w[ 56], rank =   79 /  120
    CPU time for w[ 56]      1.96 sec, wall time      0.03 sec
w[ 57], rank =   79 /  120
    CPU time for w[ 57]      1.88 sec, wall time      0.03 sec
w[ 58], rank =   79 /  120
    CPU time for w[ 58]      1.98 sec, wall time      0.03 sec
w[ 59], rank =   79 /  120
    CPU time for w[ 59]      1.92 sec, wall time      0.03 sec
w[ 60], rank =   79 /  120
    CPU time for w[ 60]      1.95 sec, wall time      0.03 sec
w[ 61], rank =   79 /  120
    CPU time for w[ 61]      1.88 sec, wall time      0.03 sec
w[ 62], rank =   79 /  120
    CPU time for w[ 62]      1.97 sec, wall time      0.03 sec
w[ 63], rank =   79 /  120
    CPU time for w[ 63]      1.94 sec, wall time      0.03 sec
Saving FFTISDF results to /central/scratch/yangjunjie//work/diamond-prim/szv/fftisdf-15-40/4-4-4//47179743/tmp.chk
    CPU time for building ISDF    349.16 sec, wall time      5.61 sec
(64, 8, 8) (64, 8, 8) (1, 64, 8, 8)
Traceback (most recent call last):
  File "/central/home/junjiey/work/fftisdf-benchmark-new/work/diamond-prim/szv/fftisdf-15-40/4-4-4/main.py", line 46, in <module>
    main(args)
  File "/central/home/junjiey/work/fftisdf-benchmark-new/work/diamond-prim/szv/fftisdf-15-40/4-4-4/main.py", line 33, in main
    scf(cell, kmesh, df_obj=df_obj, tmp=df_obj._isdf)
  File "/home/junjiey/work/fftisdf-benchmark-new/src/utils.py", line 126, in scf
    e_tot = scf_obj.kernel(dm0)
  File "<string>", line 2, in kernel
  File "/home/junjiey/anaconda3/envs/fftisdf/lib/python3.9/site-packages/pyscf/scf/hf.py", line 2016, in scf
    kernel(self, self.conv_tol, self.conv_tol_grad,
  File "/home/junjiey/anaconda3/envs/fftisdf/lib/python3.9/site-packages/pyscf/scf/hf.py", line 130, in kernel
    e_tot = mf.energy_tot(dm, h1e, vhf)
  File "/home/junjiey/anaconda3/envs/fftisdf/lib/python3.9/site-packages/pyscf/scf/addons.py", line 242, in energy_tot
    e_tot = self.energy_elec(dm, h1e, vhf)[0] + self.energy_nuc()
  File "/home/junjiey/anaconda3/envs/fftisdf/lib/python3.9/site-packages/pyscf/pbc/scf/khf.py", line 250, in energy_elec
    e_coul = 1./nkpts * np.einsum('kij,kji', dm_kpts, vhf_kpts) * 0.5
  File "/home/junjiey/anaconda3/envs/fftisdf/lib/python3.9/site-packages/numpy/core/einsumfunc.py", line 1371, in einsum
    return c_einsum(*operands, **kwargs)
ValueError: operand has more dimensions than subscripts given in einstein sum, but no '...' ellipsis provided to broadcast the extra dimensions.
