OMP_NUM_THREADS = 32
MKL_NUM_THREADS = 1
PYSCF_MAX_MEMORY = 245760
TMPDIR = /central/scratch/yangjunjie//fftisdf-ning-40/46836075/
PYSCF_TMPDIR = /central/scratch/yangjunjie//fftisdf-ning-40/46836075/

/home/junjiey/anaconda3/envs/fftisdf/bin/python
2.7.0
1.14.1
1.26.4
LOADING ISDF BACKEND
NUM_THREADS   : 32
USE_NUMPY     : 0
USE_SCIPY     : 1
USE_TORCH     : 0
USE_TORCH_GPU : 0
ISDF module: /home/junjiey/packages/pyscf-forge/pyscf-forge-yangjunjie-non-orth/pyscf/isdf/isdf_local_k.py
WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

c0 =  40.00
       get_partition wall time:     7.117519 CPU time:     7.098130
len of partition[   0] =  22632
len of partition[   1] =  22632
len of partition[   2] =  22632
len of partition[   3] =  22632
len of partition[   4] =  22441
len of partition[   5] =  22521
len of partition[   6] =  22438
len of partition[   7] =  22352
len of partition[   8] =  21688
len of partition[   9] =  21626
len of partition[  10] =  21626
len of partition[  11] =  21564
len of partition[  12] =  25929
len of partition[  13] =  25736
len of partition[  14] =  25788
len of partition[  15] =  25788
len of partition[  16] =  22632
len of partition[  17] =  22632
len of partition[  18] =  22632
len of partition[  19] =  22632
len of partition[  20] =  22441
len of partition[  21] =  22521
len of partition[  22] =  22438
len of partition[  23] =  22352
len of partition[  24] =  21688
len of partition[  25] =  21626
len of partition[  26] =  21626
len of partition[  27] =  21564
len of partition[  28] =  25929
len of partition[  29] =  25736
len of partition[  30] =  25788
len of partition[  31] =  25788
len of partition[  32] =  22632
len of partition[  33] =  22632
len of partition[  34] =  22632
len of partition[  35] =  22632
len of partition[  36] =  22441
len of partition[  37] =  22521
len of partition[  38] =  22438
len of partition[  39] =  22352
len of partition[  40] =  21688
len of partition[  41] =  21626
len of partition[  42] =  21626
len of partition[  43] =  21564
len of partition[  44] =  25929
len of partition[  45] =  25736
len of partition[  46] =  25788
len of partition[  47] =  25788
len of partition[  48] =  22632
len of partition[  49] =  22632
len of partition[  50] =  22632
len of partition[  51] =  22632
len of partition[  52] =  22441
len of partition[  53] =  22521
len of partition[  54] =  22438
len of partition[  55] =  22352
len of partition[  56] =  21688
len of partition[  57] =  21626
len of partition[  58] =  21626
len of partition[  59] =  21564
len of partition[  60] =  25929
len of partition[  61] =  25736
len of partition[  62] =  25788
len of partition[  63] =  25788
len of partition[  64] =  22632
len of partition[  65] =  22632
len of partition[  66] =  22632
len of partition[  67] =  22632
len of partition[  68] =  22441
len of partition[  69] =  22521
len of partition[  70] =  22438
len of partition[  71] =  22352
len of partition[  72] =  21688
len of partition[  73] =  21626
len of partition[  74] =  21626
len of partition[  75] =  21564
len of partition[  76] =  25929
len of partition[  77] =  25736
len of partition[  78] =  25788
len of partition[  79] =  25788
len of partition[  80] =  22632
len of partition[  81] =  22632
len of partition[  82] =  22632
len of partition[  83] =  22632
len of partition[  84] =  22441
len of partition[  85] =  22521
len of partition[  86] =  22438
len of partition[  87] =  22352
len of partition[  88] =  21688
len of partition[  89] =  21626
len of partition[  90] =  21626
len of partition[  91] =  21564
len of partition[  92] =  25929
len of partition[  93] =  25736
len of partition[  94] =  25788
len of partition[  95] =  25788
len of partition[  96] =  22632
len of partition[  97] =  22632
len of partition[  98] =  22632
len of partition[  99] =  22632
len of partition[ 100] =  22441
len of partition[ 101] =  22521
len of partition[ 102] =  22438
len of partition[ 103] =  22352
len of partition[ 104] =  21688
len of partition[ 105] =  21626
len of partition[ 106] =  21626
len of partition[ 107] =  21564
len of partition[ 108] =  25929
len of partition[ 109] =  25736
len of partition[ 110] =  25788
len of partition[ 111] =  25788
len of partition[ 112] =  22632
len of partition[ 113] =  22632
len of partition[ 114] =  22632
len of partition[ 115] =  22632
len of partition[ 116] =  22441
len of partition[ 117] =  22521
len of partition[ 118] =  22438
len of partition[ 119] =  22352
len of partition[ 120] =  21688
len of partition[ 121] =  21626
len of partition[ 122] =  21626
len of partition[ 123] =  21564
len of partition[ 124] =  25929
len of partition[ 125] =  25736
len of partition[ 126] =  25788
len of partition[ 127] =  25788
WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

WARNING!
  Very diffused basis functions are found in the basis set. They may lead to severe
  linear dependence and numerical instability.  You can set  cell.exp_to_discard=0.1
  to remove the diffused Gaussians whose exponents are less than 0.1.

             get_aoR wall time:     6.678521 CPU time:   211.969307
In _build_buffer: ISDF Local size of buffer = 794.189 MB
 ---------- In pyscf.isdf.isdf_local.select_IP_local_atm ----------
select_IP_local_atm: atm_begin =    0, atm_end =   16
select_IP_local_atm: npt_found =  237
select_IP_local_atm: npt_found =  244
select_IP_local_atm: npt_found =  246
select_IP_local_atm: npt_found =  241
select_IP_local_atm: npt_found =  230
select_IP_local_atm: npt_found =  227
select_IP_local_atm: npt_found =  225
select_IP_local_atm: npt_found =  229
select_IP_local_atm: npt_found =  272
select_IP_local_atm: npt_found =  265
select_IP_local_atm: npt_found =  267
select_IP_local_atm: npt_found =  266
select_IP_local_atm: npt_found =  361
select_IP_local_atm: npt_found =  313
select_IP_local_atm: npt_found =  349
select_IP_local_atm: npt_found =  351
select_IP_local_step1 wall time:     5.026161 CPU time:   159.939624
 build_aoRg_possible wall time:     0.044356 CPU time:     1.403330
select_IP_local_step2 wall time:     0.000136 CPU time:     0.000153
select_IP_local_step3 wall time:     0.001367 CPU time:     0.032239
Memory usage for aoR  :   1867.238 MB
Memory usage for aoRg :     22.050 MB
            build_IP wall time:     5.072021 CPU time:   161.375346
build_aux_basis_local wall time:     2.662038 CPU time:    80.785663
 ---------- In pyscf.isdf.isdf_local.build_V_W_local ----------
    CPU time for gen W [   1|[   0:  32]     16.89 sec, wall time      4.91 sec
    CPU time for gen W [   2|[  32:  64]     11.30 sec, wall time      4.59 sec
    CPU time for gen W [   3|[  64:  96]     12.67 sec, wall time      4.68 sec
    CPU time for gen W [   4|[  96: 128]     12.58 sec, wall time      4.68 sec
    CPU time for gen W [   5|[ 128: 160]     12.52 sec, wall time      4.67 sec
    CPU time for gen W [   6|[ 160: 192]     12.62 sec, wall time      4.67 sec
    CPU time for gen W [   7|[ 192: 224]     12.53 sec, wall time      4.67 sec
    CPU time for gen W [   8|[ 224: 237]      7.24 sec, wall time      1.97 sec
    CPU time for gen W [   9|[   0:  32]     13.09 sec, wall time      5.20 sec
    CPU time for gen W [  10|[  32:  64]     13.27 sec, wall time      4.69 sec
    CPU time for gen W [  11|[  64:  96]     11.58 sec, wall time      4.60 sec
    CPU time for gen W [  12|[  96: 128]     12.52 sec, wall time      4.67 sec
    CPU time for gen W [  13|[ 128: 160]     12.57 sec, wall time      4.65 sec
    CPU time for gen W [  14|[ 160: 192]     12.42 sec, wall time      4.65 sec
    CPU time for gen W [  15|[ 192: 224]     12.60 sec, wall time      4.66 sec
    CPU time for gen W [  16|[ 224: 244]      9.66 sec, wall time      3.00 sec
    CPU time for gen W [  17|[   0:  32]     13.38 sec, wall time      5.23 sec
    CPU time for gen W [  18|[  32:  64]     12.65 sec, wall time      4.69 sec
    CPU time for gen W [  19|[  64:  96]     12.70 sec, wall time      4.71 sec
    CPU time for gen W [  20|[  96: 128]     12.81 sec, wall time      4.79 sec
    CPU time for gen W [  21|[ 128: 160]     12.65 sec, wall time      4.69 sec
    CPU time for gen W [  22|[ 160: 192]     12.83 sec, wall time      4.71 sec
    CPU time for gen W [  23|[ 192: 224]     12.63 sec, wall time      4.69 sec
    CPU time for gen W [  24|[ 224: 246]     10.61 sec, wall time      3.31 sec
    CPU time for gen W [  25|[   0:  32]     14.69 sec, wall time      5.32 sec
    CPU time for gen W [  26|[  32:  64]     11.31 sec, wall time      4.59 sec
    CPU time for gen W [  27|[  64:  96]     12.35 sec, wall time      4.65 sec
    CPU time for gen W [  28|[  96: 128]     12.70 sec, wall time      4.67 sec
    CPU time for gen W [  29|[ 128: 160]     12.53 sec, wall time      4.66 sec
    CPU time for gen W [  30|[ 160: 192]     12.55 sec, wall time      4.65 sec
    CPU time for gen W [  31|[ 192: 224]     12.38 sec, wall time      4.66 sec
    CPU time for gen W [  32|[ 224: 241]      8.67 sec, wall time      2.55 sec
    CPU time for gen W [  33|[   0:  32]     13.29 sec, wall time      5.27 sec
    CPU time for gen W [  34|[  32:  64]     12.69 sec, wall time      4.71 sec
    CPU time for gen W [  35|[  64:  96]     12.77 sec, wall time      4.70 sec
    CPU time for gen W [  36|[  96: 128]     12.61 sec, wall time      4.69 sec
    CPU time for gen W [  37|[ 128: 160]     12.64 sec, wall time      4.71 sec
    CPU time for gen W [  38|[ 160: 192]     12.79 sec, wall time      4.70 sec
    CPU time for gen W [  39|[ 192: 224]     12.64 sec, wall time      4.69 sec
    CPU time for gen W [  40|[ 224: 230]      5.80 sec, wall time      1.01 sec
    CPU time for gen W [  41|[   0:  32]     14.93 sec, wall time      5.35 sec
    CPU time for gen W [  42|[  32:  64]     11.62 sec, wall time      4.60 sec
    CPU time for gen W [  43|[  64:  96]     11.56 sec, wall time      4.59 sec
    CPU time for gen W [  44|[  96: 128]     12.69 sec, wall time      4.66 sec
    CPU time for gen W [  45|[ 128: 160]     12.51 sec, wall time      4.66 sec
    CPU time for gen W [  46|[ 160: 192]     12.60 sec, wall time      4.66 sec
    CPU time for gen W [  47|[ 192: 224]     12.36 sec, wall time      4.66 sec
    CPU time for gen W [  48|[ 224: 227]      4.59 sec, wall time      0.56 sec
    CPU time for gen W [  49|[   0:  32]     12.57 sec, wall time      4.66 sec
    CPU time for gen W [  50|[  32:  64]     12.76 sec, wall time      4.67 sec
    CPU time for gen W [  51|[  64:  96]     12.50 sec, wall time      4.66 sec
    CPU time for gen W [  52|[  96: 128]     12.59 sec, wall time      4.66 sec
    CPU time for gen W [  53|[ 128: 160]     12.38 sec, wall time      4.66 sec
    CPU time for gen W [  54|[ 160: 192]     12.90 sec, wall time      4.67 sec
    CPU time for gen W [  55|[ 192: 224]     12.45 sec, wall time      4.66 sec
    CPU time for gen W [  56|[ 224: 225]      5.53 sec, wall time      0.25 sec
    CPU time for gen W [  57|[   0:  32]     14.40 sec, wall time      4.66 sec
    CPU time for gen W [  58|[  32:  64]     12.78 sec, wall time      4.76 sec
    CPU time for gen W [  59|[  64:  96]     12.44 sec, wall time      4.73 sec
    CPU time for gen W [  60|[  96: 128]     12.53 sec, wall time      4.66 sec
    CPU time for gen W [  61|[ 128: 160]     12.50 sec, wall time      4.67 sec
    CPU time for gen W [  62|[ 160: 192]     12.47 sec, wall time      4.65 sec
    CPU time for gen W [  63|[ 192: 224]     12.42 sec, wall time      4.65 sec
    CPU time for gen W [  64|[ 224: 229]      5.39 sec, wall time      0.87 sec
    CPU time for gen W [  65|[   0:  32]     13.39 sec, wall time      5.28 sec
    CPU time for gen W [  66|[  32:  64]     12.88 sec, wall time      4.71 sec
    CPU time for gen W [  67|[  64:  96]     12.68 sec, wall time      4.69 sec
    CPU time for gen W [  68|[  96: 128]     12.76 sec, wall time      4.70 sec
    CPU time for gen W [  69|[ 128: 160]     12.64 sec, wall time      4.71 sec
    CPU time for gen W [  70|[ 160: 192]     12.74 sec, wall time      4.70 sec
    CPU time for gen W [  71|[ 192: 224]     12.67 sec, wall time      4.69 sec
    CPU time for gen W [  72|[ 224: 256]     12.61 sec, wall time      4.69 sec
    CPU time for gen W [  73|[ 256: 272]      8.21 sec, wall time      2.41 sec
    CPU time for gen W [  74|[   0:  32]     13.07 sec, wall time      5.18 sec
    CPU time for gen W [  75|[  32:  64]     12.71 sec, wall time      4.67 sec
    CPU time for gen W [  76|[  64:  96]     12.48 sec, wall time      4.65 sec
    CPU time for gen W [  77|[  96: 128]     12.46 sec, wall time      4.65 sec
    CPU time for gen W [  78|[ 128: 160]     12.70 sec, wall time      4.67 sec
    CPU time for gen W [  79|[ 160: 192]     12.34 sec, wall time      4.66 sec
    CPU time for gen W [  80|[ 192: 224]     12.50 sec, wall time      4.65 sec
    CPU time for gen W [  81|[ 224: 256]     12.49 sec, wall time      4.66 sec
    CPU time for gen W [  82|[ 256: 265]      6.70 sec, wall time      1.44 sec
    CPU time for gen W [  83|[   0:  32]     12.55 sec, wall time      4.75 sec
    CPU time for gen W [  84|[  32:  64]     12.63 sec, wall time      4.66 sec
    CPU time for gen W [  85|[  64:  96]     12.48 sec, wall time      4.64 sec
    CPU time for gen W [  86|[  96: 128]     12.48 sec, wall time      4.63 sec
    CPU time for gen W [  87|[ 128: 160]     12.45 sec, wall time      4.65 sec
    CPU time for gen W [  88|[ 160: 192]     12.42 sec, wall time      4.67 sec
    CPU time for gen W [  89|[ 192: 224]     12.42 sec, wall time      4.68 sec
    CPU time for gen W [  90|[ 224: 256]     12.72 sec, wall time      4.68 sec
    CPU time for gen W [  91|[ 256: 267]      6.96 sec, wall time      1.70 sec
    CPU time for gen W [  92|[   0:  32]     13.26 sec, wall time      5.23 sec
    CPU time for gen W [  93|[  32:  64]     12.44 sec, wall time      4.65 sec
    CPU time for gen W [  94|[  64:  96]     12.42 sec, wall time      4.64 sec
    CPU time for gen W [  95|[  96: 128]     12.60 sec, wall time      4.65 sec
    CPU time for gen W [  96|[ 128: 160]     12.56 sec, wall time      4.65 sec
    CPU time for gen W [  97|[ 160: 192]     12.42 sec, wall time      4.63 sec
    CPU time for gen W [  98|[ 192: 224]     12.48 sec, wall time      4.66 sec
    CPU time for gen W [  99|[ 224: 256]     12.51 sec, wall time      4.67 sec
    CPU time for gen W [ 100|[ 256: 266]      7.13 sec, wall time      1.59 sec
    CPU time for gen W [ 101|[   0:  32]     13.21 sec, wall time      5.19 sec
    CPU time for gen W [ 102|[  32:  64]     12.64 sec, wall time      4.67 sec
    CPU time for gen W [ 103|[  64:  96]     12.59 sec, wall time      4.67 sec
    CPU time for gen W [ 104|[  96: 128]     12.75 sec, wall time      4.67 sec
    CPU time for gen W [ 105|[ 128: 160]     12.46 sec, wall time      4.65 sec
    CPU time for gen W [ 106|[ 160: 192]     12.58 sec, wall time      4.66 sec
    CPU time for gen W [ 107|[ 192: 224]     12.45 sec, wall time      4.65 sec
    CPU time for gen W [ 108|[ 224: 256]     12.43 sec, wall time      4.65 sec
    CPU time for gen W [ 109|[ 256: 288]     12.45 sec, wall time      4.66 sec
    CPU time for gen W [ 110|[ 288: 320]     12.69 sec, wall time      4.67 sec
    CPU time for gen W [ 111|[ 320: 352]     12.44 sec, wall time      4.65 sec
    CPU time for gen W [ 112|[ 352: 361]      6.77 sec, wall time      1.44 sec
    CPU time for gen W [ 113|[   0:  32]     13.07 sec, wall time      5.19 sec
    CPU time for gen W [ 114|[  32:  64]     12.52 sec, wall time      4.67 sec
    CPU time for gen W [ 115|[  64:  96]     12.39 sec, wall time      4.62 sec
    CPU time for gen W [ 116|[  96: 128]     12.58 sec, wall time      4.67 sec
    CPU time for gen W [ 117|[ 128: 160]     12.39 sec, wall time      4.64 sec
    CPU time for gen W [ 118|[ 160: 192]     12.48 sec, wall time      4.61 sec
    CPU time for gen W [ 119|[ 192: 224]     12.32 sec, wall time      4.64 sec
    CPU time for gen W [ 120|[ 224: 256]     12.37 sec, wall time      4.60 sec
    CPU time for gen W [ 121|[ 256: 288]     12.39 sec, wall time      4.63 sec
    CPU time for gen W [ 122|[ 288: 313]     10.95 sec, wall time      3.66 sec
    CPU time for gen W [ 123|[   0:  32]     12.48 sec, wall time      4.74 sec
    CPU time for gen W [ 124|[  32:  64]     12.57 sec, wall time      4.64 sec
    CPU time for gen W [ 125|[  64:  96]     12.37 sec, wall time      4.62 sec
    CPU time for gen W [ 126|[  96: 128]     12.44 sec, wall time      4.64 sec
    CPU time for gen W [ 127|[ 128: 160]     12.40 sec, wall time      4.63 sec
    CPU time for gen W [ 128|[ 160: 192]     12.36 sec, wall time      4.63 sec
    CPU time for gen W [ 129|[ 192: 224]     12.38 sec, wall time      4.64 sec
    CPU time for gen W [ 130|[ 224: 256]     12.59 sec, wall time      4.73 sec
    CPU time for gen W [ 131|[ 256: 288]     12.38 sec, wall time      4.63 sec
    CPU time for gen W [ 132|[ 288: 320]     12.39 sec, wall time      4.63 sec
    CPU time for gen W [ 133|[ 320: 349]     11.69 sec, wall time      4.21 sec
    CPU time for gen W [ 134|[   0:  32]     13.27 sec, wall time      5.24 sec
    CPU time for gen W [ 135|[  32:  64]     12.89 sec, wall time      4.76 sec
    CPU time for gen W [ 136|[  64:  96]     12.61 sec, wall time      4.66 sec
    CPU time for gen W [ 137|[  96: 128]     12.54 sec, wall time      4.66 sec
    CPU time for gen W [ 138|[ 128: 160]     12.54 sec, wall time      4.67 sec
    CPU time for gen W [ 139|[ 160: 192]     12.53 sec, wall time      4.66 sec
    CPU time for gen W [ 140|[ 192: 224]     12.50 sec, wall time      4.66 sec
    CPU time for gen W [ 141|[ 224: 256]     12.47 sec, wall time      4.65 sec
    CPU time for gen W [ 142|[ 256: 288]     12.54 sec, wall time      4.66 sec
    CPU time for gen W [ 143|[ 288: 320]     12.45 sec, wall time      4.67 sec
    CPU time for gen W [ 144|[ 320: 351]     12.41 sec, wall time      4.60 sec
     build_V_W_local wall time:   638.320580 CPU time:  1747.413284
Number of interpolation points = 34584, effective CISDF =  49.12
    CPU time for ISDF build   2218.19 sec, wall time    661.12 sec
/home/junjiey/anaconda3/envs/fftisdf/lib/python3.12/site-packages/pyscf/gto/mole.py:1294: UserWarning: Function mol.dumps drops attribute a because it is not JSON-serializable
  warnings.warn(msg)
/home/junjiey/anaconda3/envs/fftisdf/lib/python3.12/site-packages/pyscf/gto/mole.py:1294: UserWarning: Function mol.dumps drops attribute _mesh because it is not JSON-serializable
  warnings.warn(msg)
/home/junjiey/anaconda3/envs/fftisdf/lib/python3.12/site-packages/pyscf/gto/mole.py:1294: UserWarning: Function mol.dumps drops attribute spin because it is not JSON-serializable
  warnings.warn(msg)
finished saving to /central/scratch/yangjunjie//fftisdf-ning-40/46836075/isdf.chk
